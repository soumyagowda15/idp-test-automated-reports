{
  "stats": {
    "suites": 9,
    "tests": 86,
    "passes": 41,
    "pending": 0,
    "failures": 45,
    "start": "2023-09-05T05:53:03.179Z",
    "end": "2023-09-05T05:55:16.764Z",
    "duration": 133585,
    "testsRegistered": 86,
    "passPercent": 47.674418604651166,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5e44122d-37cd-4188-8ed2-30e598ccef17",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "790d5864-8e12-43ce-9bbf-609c224fa975",
          "title": "Neutrinos Intelligent Document Processing APIs",
          "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "fullTitle": "Neutrinos Intelligent Document Processing APIs \"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "timedOut": false,
              "duration": 449,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                                .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                                .setValue(\"grant_type\", configData.GRANT_TYPE)\n                                .encode();;\n//Send request to fetch access Token\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: { \n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nACCESS_TOKEN = bodyObj.access_token;",
              "err": {},
              "uuid": "4e84270a-6b62-4697-b5f3-8c62e50c8705",
              "parentUUID": "790d5864-8e12-43ce-9bbf-609c224fa975",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
              "title": "Get Access Token",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_AC_01->To verify that access Token is genearted when proper client ID (client should be registered to DEV IDP), client Secret, and grant type is provided in the Input for the Get Access Token POST API ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_01->To verify that access Token is genearted when proper client ID (client should be registered to DEV IDP), client Secret, and grant type is provided in the Input for the Get Access Token POST API ",
                  "timedOut": false,
                  "duration": 592,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=client_credentials\"\n}",
                  "code": "//update testData &encode testData\nconst body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                                  .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                                  .setValue(\"grant_type\", configData.GRANT_TYPE)\n                                  .encode();\n//Send request to fetch access Token\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n// Assertion for response\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(200));\n  ACCESS_TOKEN = bodyObj.access_token;\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "b377cf0a-ed5a-4ae4-93cc-bc807bd97df5",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_02->To Verify Error is thrown if the Content-Type in the header is not application/x-www-form-urlencoded ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_02->To Verify Error is thrown if the Content-Type in the header is not application/x-www-form-urlencoded ",
                  "timedOut": false,
                  "duration": 512,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                         .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                         .setValue(\"grant_type\", configData.GRANT_TYPE)\n                         .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/json\"\n   }\n })\n genericMethods.addContext(this, 'INPUT ', body);\n let bodyObj = JSON.parse(resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n   assert.equal(bodyObj.error_description, dataValidation.INVALID_CONTENT_TYPE);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {},
                  "uuid": "644d0dad-2642-46c4-b625-c4f65a8baf70",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_03->To verify error is thrown if client_id and client_secret are not of same client",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_03->To verify error is thrown if client_id and client_secret are not of same client",
                  "timedOut": false,
                  "duration": 610,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=nyZwKpIODGYbayAv4QKTnWJInmTeI8CZiTSfGwU1DFFsBiYLM2Y8p6EmHYCk0sZ_4Pk-6Z9FOfiKPtaiWK81qA&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET1)\n                        .setValue(\"grant_type\", configData.GRANT_TYPE)\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "6a0cf8dc-2028-49eb-85c6-43838f48728b",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_04->To verify that error is thrown if the grant_type in the Input body is not client_credentials",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_04->To verify that error is thrown if the grant_type in the Input body is not client_credentials",
                  "timedOut": false,
                  "duration": 525,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=grant\"\n}",
                  "code": "let body = await accessTokenData.setValue( \"client_id\", process.env.CLIENT_ID)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", \"grant\")\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n     \nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_GRANT_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "6d557a5d-dc48-4d9e-a32a-ccb885766fa2",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_05->To verify error is thrown if for a client registered in IDP ,client secret is random text in the input body for Get Access Token POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_05->To verify error is thrown if for a client registered in IDP ,client secret is random text in the input body for Get Access Token POST API",
                  "timedOut": false,
                  "duration": 399,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=clientSecret&grant_type=client_credentials\"\n}",
                  "code": "let body=await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                      .setValue(\"client_secret\", \"clientSecret\")\n                      .setValue(\"grant_type\", configData.GRANT_TYPE)\n                      .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "3ad8f26e-8e1a-4fcb-9036-774f0b60f07b",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_06->To verify that error is thrown if the grant_type is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_06->To verify that error is thrown if the grant_type is null",
                  "timedOut": false,
                  "duration": 539,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=null\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                        .setValue( \"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", null)\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n     \nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_GRANT_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "c5292f1b-d5a5-49c7-95b5-758800149394",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_07->To verify that error is thrown if the grant_type is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_07->To verify that error is thrown if the grant_type is empty",
                  "timedOut": false,
                  "duration": 620,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", \"\")\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.MISSING_GRANT_PARAMETER);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "fdc3dc20-43dc-4bc9-aaf5-5931ef75797d",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_08->To verify error is thrown if client_id is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_08->To verify error is thrown if client_id is null",
                  "timedOut": false,
                  "duration": 590,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=null&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", null)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", configData.GRANT_TYPE)\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "1f5eaea9-3950-4765-9b63-a79f78a2462c",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_09->To verify error is thrown if client_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_09->To verify error is thrown if client_id is empty",
                  "timedOut": false,
                  "duration": 374,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", \"\")\n                     .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                     .setValue(\"grant_type\", configData.GRANT_TYPE)\n                     .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_CLIENT);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "1fdc2aea-7f12-4b68-870e-e20d655fdf67",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_10->To verify error is thrown if client_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_10->To verify error is thrown if client_id is empty space",
                  "timedOut": false,
                  "duration": 391,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=%20&client_secret=RFTMM5Gj77ttuh-pWLOGvxUuNkyXiQCqE8Yj7s8w8vROgFmmVVi8tQjIihq1cA_R3D6RQ2TSbtcoG6lBFJqMIA&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", \" \")\n                     .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                     .setValue(\"grant_type\", configData.GRANT_TYPE)\n                     .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/x-www-form-urlencoded\"\n   }\n })\n genericMethods.addContext(this, 'INPUT ', body);\n \n let bodyObj = JSON.parse(resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n   assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {},
                  "uuid": "bfdfe4db-8790-466b-b562-1c0d6acbf1fd",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_11->To verify error is thrown if client_secret is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_11->To verify error is thrown if client_secret is null",
                  "timedOut": false,
                  "duration": 355,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=null&grant_type=client_credentials\"\n}",
                  "code": "let body =  await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                      .setValue(\"client_secret\", null)\n                      .setValue(\"grant_type\", configData.GRANT_TYPE)\n                      .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "2635abaa-4d82-481e-bd3e-1b9d2eb2f224",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_12->To verify error is thrown if client_secret is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_12->To verify error is thrown if client_secret is empty",
                  "timedOut": false,
                  "duration": 359,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                     .setValue(\"client_secret\", \"\")\n                     .setValue(\"grant_type\", configData.GRANT_TYPE)\n                     .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "03fdbd5a-20fc-4bdc-aa97-687b6914de40",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_13->To verify error is thrown if client_secret is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_13->To verify error is thrown if client_secret is empty space",
                  "timedOut": false,
                  "duration": 347,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=7nmOiRQ_SOGsjVOw9YyF5&client_secret=%20&grant_type=client_credentials\"\n}",
                  "code": "let body = accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n               .setValue(\"client_secret\", \" \")\n               .setValue( \"grant_type\", configData.GRANT_TYPE)\n               .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/x-www-form-urlencoded\"\n   }\n })\n genericMethods.addContext(this, 'INPUT ', body);\n \n let bodyObj = JSON.parse(resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n   assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {},
                  "uuid": "8d3602a5-4526-46e2-89d3-17259e6c8348",
                  "parentUUID": "d8c30ad2-21ec-4eec-80cb-33db6e091a3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b377cf0a-ed5a-4ae4-93cc-bc807bd97df5",
                "644d0dad-2642-46c4-b625-c4f65a8baf70",
                "6a0cf8dc-2028-49eb-85c6-43838f48728b",
                "6d557a5d-dc48-4d9e-a32a-ccb885766fa2",
                "3ad8f26e-8e1a-4fcb-9036-774f0b60f07b",
                "c5292f1b-d5a5-49c7-95b5-758800149394",
                "fdc3dc20-43dc-4bc9-aaf5-5931ef75797d",
                "1f5eaea9-3950-4765-9b63-a79f78a2462c",
                "1fdc2aea-7f12-4b68-870e-e20d655fdf67",
                "bfdfe4db-8790-466b-b562-1c0d6acbf1fd",
                "2635abaa-4d82-481e-bd3e-1b9d2eb2f224",
                "03fdbd5a-20fc-4bdc-aa97-687b6914de40",
                "8d3602a5-4526-46e2-89d3-17259e6c8348"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6213,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
              "title": "Create Job",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_CJ_01->To verify Job is created for a client if the proper tenant and access token is provided in the header for '/JOB' POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_01->To verify Job is created for a client if the proper tenant and access token is provided in the header for '/JOB' POST API",
                  "timedOut": false,
                  "duration": 2310,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"callback_url\\\":\\\"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "//testData for createJob\n      let body = JSON.stringify(createJobTestData);\n      //send Request\n      resp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n body: body,\n headers: {\n   \"Content-Type\": \"application/json\",\n   \"tenant\": \"neutrinos\",\n   \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n }\n      })\n      genericMethods.addContext(this, 'INPUT JSON', body);\n      genericMethods.addContext(this, 'OUTPUT JSON', resp.body);\n      // Fetch data for jobs MongoDB table\n      var bodyObj = JSON.parse(resp.body);\n      jobsMongoData = await genericMethods.mongoDBDataFetch(\"jobs\", { \"job_name\": bodyObj[0].job_name });\n      genericMethods.addContext(this, 'MongoDb-Jobs', jobsMongoData);\n      //assertion for response\n      if (resp !== undefined) {\n assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(200));\n JOB_ID = bodyObj[0]._id;\n assert.equal(bodyObj[0].job_type, \"doc_analysis\");\n assert.exists(bodyObj[0].tenant_id);\n assert.exists(bodyObj[0].job_name);\n assert.exists(bodyObj[0].status);\n assert.equal(bodyObj[0].client_id, process.env.CLIENT_ID);\n assert.exists(bodyObj[0]._id);\n      }\n      else {\n assert.fail(resp, \"is undefined\")\n      }",
                  "err": {
                    "message": "TypeError: Cannot read property 'job_name' of undefined",
                    "estack": "TypeError: Cannot read property 'job_name' of undefined\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:407:94)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "ed0f26a6-426d-4eea-99bf-b815f1ef6c80",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_02->To verify job is not created if expired access Token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_02->To verify job is not created if expired access Token is passed",
                  "timedOut": false,
                  "duration": 1910,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"callback_url\\\":\\\"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"idp-sandbox.neutrinos.co\",\n      \"hostname\": \"idp-sandbox.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://idp-sandbox.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"idp-sandbox.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"idp-sandbox.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://idp-sandbox.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer XZID-4oErmMFGGjKWK0UgAHVXDUfY5KzQnUwfagzWO-\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 132\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"callback_url\\\":\\\"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Tue, 05 Sep 2023 05:53:13 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"94\",\n        \"connection\": \"close\",\n        \"x-powered-by\": \"Express\",\n        \"content-security-policy\": \"default-src * 'self' 'unsafe-inline' 'unsafe-eval' data: gap: content: blob:;style-src 'self' 'unsafe-inline' fonts.googleapis.com;connect-src 'self' *.neutrinos.co data: gap: content: blob: *.googleapis.com;script-src 'self' 'unsafe-inline' 'unsafe-eval' *.neutrinos.co;img-src 'self' data: blob: *.neutrinos.co;base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests\",\n        \"vary\": \"Origin, Accept-Encoding\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"5e-FpxP0i0b+BDpEOlwGcg5x3szWSo\\\"\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n    }\n  }\n]",
                  "code": "let body=JSON.stringify(createJobTestData);\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.active, false);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "f7191f65-e01c-462b-b0da-bead0bd9e9de",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_03->To verify that job is not created when client is not registered to DEV IDP",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_03->To verify that job is not created when client is not registered to DEV IDP",
                  "timedOut": false,
                  "duration": 2722,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": {\n      \"callback_url\": \"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\",\n      \"created_by\": \" \"\n    }\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"idp-sandbox.neutrinos.co\",\n      \"hostname\": \"idp-sandbox.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://idp-sandbox.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"idp-sandbox.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"idp-sandbox.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://idp-sandbox.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer gcaFK6L4Nwm0YM_yAJAoVu2lhJnZCFgrfNBGuLNVYYg\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 132\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"callback_url\\\":\\\"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Tue, 05 Sep 2023 05:53:15 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"47\",\n        \"connection\": \"close\",\n        \"x-powered-by\": \"Express\",\n        \"content-security-policy\": \"default-src * 'self' 'unsafe-inline' 'unsafe-eval' data: gap: content: blob:;style-src 'self' 'unsafe-inline' fonts.googleapis.com;connect-src 'self' *.neutrinos.co data: gap: content: blob: *.googleapis.com;script-src 'self' 'unsafe-inline' 'unsafe-eval' *.neutrinos.co;img-src 'self' data: blob: *.neutrinos.co;base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests\",\n        \"vary\": \"Origin, Accept-Encoding\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"2f-pcUQ7NLGU5OS0ooX4qYkkJu3Kw8\\\"\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n    }\n  }\n]",
                  "code": "//Generate access token using unregistered client_id and client_secret\n let body = await accessTokenData.setValue(\"client_id\", process.env.UNREGISTERED_CLIENT_ID)\n                                 .setValue(\"client_secret\", process.env.UNREGISTERED_CLIENT_SECRET)\n                                 .setValue(\"grant_type\", configData.GRANT_TYPE)\n                                 .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/x-www-form-urlencoded\"\n   }\n })\n UNREGISTERED_CLIENT_ACCESS_TOKEN = JSON.parse(resp.body).access_token;\n resp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n   body: JSON.stringify(createJobTestData),\n   headers: {\n     \"Content-Type\": \"application/json\",\n     \"tenant\": \"neutrinos\",\n     \"Authorization\": `Bearer ${UNREGISTERED_CLIENT_ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT JSON', createJobTestData);\n genericMethods.addContext(this, 'OUTPUT JSON', resp);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n   let bodyObj = JSON.parse(resp.body);\n   assert.equal(bodyObj.message, dataValidation.UNREGISTERED_CLIENT);\n }\n else {\n   assert.fail(resp, \"Response is undefined\");\n }",
                  "err": {},
                  "uuid": "6c8ab051-a3b8-4ae8-a2d3-b63fb1e64521",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_04->To verify error is thrown if tenant is not neutrinos",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_04->To verify error is thrown if tenant is not neutrinos",
                  "timedOut": false,
                  "duration": 2080,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"callback_url\\\":\\\"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n  }\n]",
                  "code": "let body=JSON.stringify(createJobTestData);\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp.body);\nif (resp !== undefined) {\n  var bodyObj = JSON.parse(resp.body);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  assert.equal(bodyObj.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"is undefined\")\n}",
                  "err": {},
                  "uuid": "f802e3d6-15f5-46a1-a497-9ad2b18d8d67",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_05->To verify error is thrown if payload is not JSON",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_05->To verify error is thrown if payload is not JSON",
                  "timedOut": false,
                  "duration": 1564,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"Invalid Payload\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = \"Invalid Payload\"\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"text/plain\",\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:526:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "f673af06-4ff3-4f30-a8c3-6598032f02b8",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_06->To verify job is not created if invalid access Token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_06->To verify job is not created if invalid access Token is passed",
                  "timedOut": false,
                  "duration": 1886,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"callback_url\\\":\\\"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"idp-sandbox.neutrinos.co\",\n      \"hostname\": \"idp-sandbox.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://idp-sandbox.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"idp-sandbox.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"idp-sandbox.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://idp-sandbox.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer INVALID_ACCESS_TOKEN\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 132\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"callback_url\\\":\\\"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Tue, 05 Sep 2023 05:53:21 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"94\",\n        \"connection\": \"close\",\n        \"x-powered-by\": \"Express\",\n        \"content-security-policy\": \"default-src * 'self' 'unsafe-inline' 'unsafe-eval' data: gap: content: blob:;style-src 'self' 'unsafe-inline' fonts.googleapis.com;connect-src 'self' *.neutrinos.co data: gap: content: blob: *.googleapis.com;script-src 'self' 'unsafe-inline' 'unsafe-eval' *.neutrinos.co;img-src 'self' data: blob: *.neutrinos.co;base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests\",\n        \"vary\": \"Origin, Accept-Encoding\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"5e-FpxP0i0b+BDpEOlwGcg5x3szWSo\\\"\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n    }\n  }\n]",
                  "code": "let body=JSON.stringify(createJobTestData);\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer INVALID_ACCESS_TOKEN`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.active, false);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "bf2de5e2-7a48-4611-acc2-f565463f3f4c",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_07->To verify error is thrown if job_type is removed in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_07->To verify error is thrown if job_type is removed in the json body",
                  "timedOut": false,
                  "duration": 2280,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"callback_url\": \"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\",\n      \"created_by\": \" \"\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = await createJobData.removeKey(\"job_type\");\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.UNKNOWN_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:567:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "967c1f03-660f-4879-902f-6c0af81eb97d",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_08->To verify error is thrown if created_by is removed in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_08->To verify error is thrown if created_by is removed in the json body",
                  "timedOut": false,
                  "duration": 2250,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"callback_url\": \"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\",\n      \"created_by\": \" \"\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = createJobData.removeKey(\"created_by\");\n\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body:  JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.INVALID_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:589:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "816bcb61-6294-4578-b950-d5feb6b313ba",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_09->To verify error is thrown if created_by is empty value in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_09->To verify error is thrown if created_by is empty value in the json body",
                  "timedOut": false,
                  "duration": 2288,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"data\": {\n        \"callback_url\": \"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\",\n        \"created_by\": \" \"\n      }\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = createJobData.setValue(\"created_by\", \"\");\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.INVALID_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:610:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "449a9ccd-261d-4d9c-821e-7652377826e3",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_10->To verify error is thrown if created_by is empty space value in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_10->To verify error is thrown if created_by is empty space value in the json body",
                  "timedOut": false,
                  "duration": 2312,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"data\": {\n        \"callback_url\": \"https://a3a3-106-51-76-221.ngrok-free.app/api/callback\",\n        \"created_by\": \" \"\n      }\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = createJobData.setValue(\"created_by\", \" \");\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.UNKNOWN_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:631:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "6158f204-91e6-401e-8d8f-ac53782336a5",
                  "parentUUID": "14103002-abd4-4fc0-aa3d-ba9e9c369cb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f7191f65-e01c-462b-b0da-bead0bd9e9de",
                "6c8ab051-a3b8-4ae8-a2d3-b63fb1e64521",
                "f802e3d6-15f5-46a1-a497-9ad2b18d8d67",
                "bf2de5e2-7a48-4611-acc2-f565463f3f4c"
              ],
              "failures": [
                "ed0f26a6-426d-4eea-99bf-b815f1ef6c80",
                "f673af06-4ff3-4f30-a8c3-6598032f02b8",
                "967c1f03-660f-4879-902f-6c0af81eb97d",
                "816bcb61-6294-4578-b950-d5feb6b313ba",
                "449a9ccd-261d-4d9c-821e-7652377826e3",
                "6158f204-91e6-401e-8d8f-ac53782336a5"
              ],
              "pending": [],
              "skipped": [],
              "duration": 21602,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "b9dff449-2dea-48e5-a425-17400b9fccf7",
              "title": "Upload Document to a Job",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_UD_01->To verify user is able to uplaod pdf document successfully with job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_01->To verify user is able to uplaod pdf document successfully with job_id",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// request to upload Document\nvar resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\n// files.files MongoDB Data\nlet uploadDocMongoData = (await genericMethods.mongoDBDataFetch(\"files.files\", { \"metadata.job_id\": JOB_ID }, ''));\ngenericMethods.addContext(this, 'Upload Document', uploadDocMongoData)\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.exists(resp.body[\"_id\"]);\n  FILE_ID = resp.body[\"_id\"];\n  // assertion for other fields are pending\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:649:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "9d35cd79-939b-4936-afe4-4d9443a587e6",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_02->To verify user is able to upload multiple documnets to same job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_02->To verify user is able to upload multiple documnets to same job_id",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// request to upload Document one more document to same job_id\nvar resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\n// files.files MongoDB Data\nlet uploadDocMongoData = (await genericMethods.mongoDBDataFetch(\"files.files\", { \"metadata.job_id\": JOB_ID }, ''));\ngenericMethods.addContext(this, 'Upload Document', uploadDocMongoData)\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.exists(resp.body[\"_id\"]);\n  // assertion for other fields are pending\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:674:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "2dd15743-007e-4608-8aea-8e46deb22a0f",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_03->To verify only pdf format documnet is supported",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_03->To verify only pdf format documnet is supported",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/pancard.png`), `pancard.png`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.INTERNAL_SERVER_ERROR);\n  assert.equal(resp.body.message.message, dataValidation.INVALID_PDF_STRUCTURE);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:698:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "952df1ad-bd10-47e7-b0ae-42cb73e58162",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_04->To verify error is thrown if the job_id sent in the request body is not present in the jobs mongoDB Collections",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_04->To verify error is thrown if the job_id sent in the request body is not present in the jobs mongoDB Collections",
                  "timedOut": false,
                  "duration": 4013,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"message\": \"unregistered client.\"\n  }\n}",
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \"Invalid Job_id\");\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body.message, dataValidation.JOB_ID_REQUIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:720:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "a0ba69b3-2c6f-49bd-9a3a-b0cb4063f190",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_05->To Verify Error is thrown if the content-type in the request is not multipart/form-data",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_05->To Verify Error is thrown if the content-type in the request is not multipart/form-data",
                  "timedOut": false,
                  "duration": 2269,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n}",
                  "code": "var URL_UPLOAD_DOCUMENT = process.env.BASE_URL + configData.SUB_URL_UPLOAD_DOCUMENT;\nlet body = uploadDocData.setValue(\"job_id\", JOB_ID);\nbody = JSON.stringify(body);\nresp = await genericMethods.postApiCall(URL_UPLOAD_DOCUMENT, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.CONTENT_TYPE_INVALID);\n}\nelse {\n  assert.fail(resp, \" Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:744:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "377fa535-3073-467d-a88f-e62fcfe85974",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.body.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:758:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "710ab946-8070-42fc-bbc7-876530183c6f",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', \"INVALID_ACCESS_TOKEN\")\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.body.result.reason, dataValidation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:776:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "1bc95a7f-f4e8-4fe3-9fd6-d383645287dd",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'IDP_DEV')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.body.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:793:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "126318ff-babd-473c-8704-42bda5b32782",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_09->To verify error is thrown if empty tenant is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_09->To verify error is thrown if empty tenant is passed in the header",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', ' ')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.body.result.reason, dataValidation.TENANT_MISSING);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:811:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "e051e5fd-3f93-425b-82cb-c5c533983b3a",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_10->To verify error is thrown if empty access token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_10->To verify error is thrown if empty access token is passed in the header",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', ' ')\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.body.result.reason, dataValidation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:830:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "2b3e9e14-bb3f-439d-9d65-329ef54f460d",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_11->To verify error is thrown if document is not uploaded in request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_11->To verify error is thrown if document is not uploaded in request body",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', '')\n  .field('job_id', JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body.message, dataValidation.INVALID_FILE_FORMAT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:848:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "40a5981f-91bc-4a8b-9131-f8d99f97ee68",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_12->To verify error is thrown if job_id is removed in the request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_12->To verify error is thrown if job_id is removed in the request body",
                  "timedOut": false,
                  "duration": 3363,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"message\": \"unregistered client.\"\n  }\n}",
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body.message, dataValidation.JOB_ID_REQUIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:871:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "ee32b235-3812-4e07-a3ff-3d49f8b3229b",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_13->To verify error is thron if files field is removed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_13->To verify error is thron if files field is removed in the header",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body.message, dataValidation.INVALID_FILE_FORMAT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "Error: .field(name, val) val can not be empty",
                    "estack": "Error: .field(name, val) val can not be empty\n    at Test.RequestBase.field (node_modules\\chai-http\\node_modules\\superagent\\lib\\request-base.js:401:11)\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:883:10)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "067a3bb3-7bc4-405b-9376-4ba6a01dcded",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_14->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_14->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 4071,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"message\": \"unregistered client.\"\n  }\n}",
                  "code": "chai.use(chaiHttp);\nvar resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \" \")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body.message, dataValidation.JOB_ID_REQUIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:907:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "2a06fe20-0cd1-42fc-9658-50bdd2dc6e9a",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_15->To verify error is thrown if job_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_15->To verify error is thrown if job_id is empty space",
                  "timedOut": false,
                  "duration": 4308,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"message\": \"unregistered client.\"\n  }\n}",
                  "code": "var resp = await chai.request(process.env.BASE_URL).post(configData.SUB_URL_UPLOAD_DOCUMENT)\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`${DocumentsFolderPath}/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \" \")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body.message, dataValidation.JOB_ID_REQUIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:926:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "ec48f851-2547-4b5e-8946-d75dd425141c",
                  "parentUUID": "b9dff449-2dea-48e5-a425-17400b9fccf7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "9d35cd79-939b-4936-afe4-4d9443a587e6",
                "2dd15743-007e-4608-8aea-8e46deb22a0f",
                "952df1ad-bd10-47e7-b0ae-42cb73e58162",
                "a0ba69b3-2c6f-49bd-9a3a-b0cb4063f190",
                "377fa535-3073-467d-a88f-e62fcfe85974",
                "710ab946-8070-42fc-bbc7-876530183c6f",
                "1bc95a7f-f4e8-4fe3-9fd6-d383645287dd",
                "126318ff-babd-473c-8704-42bda5b32782",
                "e051e5fd-3f93-425b-82cb-c5c533983b3a",
                "2b3e9e14-bb3f-439d-9d65-329ef54f460d",
                "40a5981f-91bc-4a8b-9131-f8d99f97ee68",
                "ee32b235-3812-4e07-a3ff-3d49f8b3229b",
                "067a3bb3-7bc4-405b-9376-4ba6a01dcded",
                "2a06fe20-0cd1-42fc-9658-50bdd2dc6e9a",
                "ec48f851-2547-4b5e-8946-d75dd425141c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 18030,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "44c76de4-5d0a-483f-abd9-38370a97bf43",
              "title": "Start Document Analysis",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_SDA_01->To verify Document is processed successfully if access_token , tenant is passed in the request header and job_id in body for '/api/job/start-doc-analysis' POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_01->To verify Document is processed successfully if access_token , tenant is passed in the request header and job_id in body for '/api/job/start-doc-analysis' POST API",
                  "timedOut": false,
                  "duration": 2276,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = startDocData.updateValue(\"job_id\", JOB_ID);\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n}\nelse {\n  assert.fail(resp, \" Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:954:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "92273020-d4a7-4cf3-830b-49408fd38fa5",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_02->To verify error is thrown if invalid job_id is passed in the request body for '/api/job/start-doc-analysis' POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_02->To verify error is thrown if invalid job_id is passed in the request body for '/api/job/start-doc-analysis' POST API",
                  "timedOut": false,
                  "duration": 2272,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = startDocData.updateValue(\"job_id\", configData.INVALID_JOB_ID);\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.JOB_ID_REQUIRED_START_DOC);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:975:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "68cedc18-926f-4dc7-af81-d3c90d6db962",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_03->To verify Document is not processed if expired access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_03->To verify Document is not processed if expired access token is passed",
                  "timedOut": false,
                  "duration": 1879,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let body = startDocData.updateValue(\"job_id\", JOB_ID);\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {},
                  "uuid": "42d729a4-c807-4383-a694-7206ea8e20e1",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_04->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_04->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 1897,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let body = startDocData.updateValue(\"job_id\", JOB_ID);\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {},
                  "uuid": "fdb34e6d-e34a-48ec-ac9f-efbede9a3a03",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_05->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_05->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 2062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n  }\n]",
                  "code": "let body = startDocData.updateValue(\"job_id\", JOB_ID);\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": \"IDP_DEV\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {},
                  "uuid": "0c75466e-8e05-4cd0-ab39-ea8d32818b41",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_06->To verify error is thrown if payload is not JSON",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_06->To verify error is thrown if payload is not JSON",
                  "timedOut": false,
                  "duration": 2291,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"Invalid Payload\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = \"Invalid Payload\";\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"text/plain\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1066:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "5df22792-be71-4a9c-88bc-f3a876acea49",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_07->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_07->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 2307,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = startDocData.updateValue(\"job_id\", \"\");\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\n// issue created\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1088:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "1d9be39f-45d2-4886-a356-b3f491004cd3",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_08->To verify error is thrown if job_id is removed in the request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_08->To verify error is thrown if job_id is removed in the request body",
                  "timedOut": false,
                  "duration": 2297,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let body = startDocData.removeKey(\"job_id\");\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.JOB_ID_REQUIRED_START_DOC);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1110:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "3f424426-d595-4503-ab30-b6780459e7c4",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_09->To verify error is thrown if for the given job_id documents are not uploaded ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_09->To verify error is thrown if for the given job_id documents are not uploaded ",
                  "timedOut": false,
                  "duration": 1572,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": {\n      \"job_id\": \"63e3a0b252e7f50019ed7253\"\n    }\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"idp-sandbox.neutrinos.co\",\n      \"hostname\": \"idp-sandbox.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job/start-doc-analysis\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://idp-sandbox.neutrinos.co/api/job/start-doc-analysis\",\n      \"gotOptions\": {\n        \"path\": \"/api/job/start-doc-analysis\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"idp-sandbox.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"idp-sandbox.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job/start-doc-analysis\",\n        \"href\": \"https://idp-sandbox.neutrinos.co/api/job/start-doc-analysis\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer zYQMiIZD0pftWZcxNreCuBkfoHDExWDyiU-U_bHnskq\",\n          \"content-type\": \"application/json\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 37\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_id\\\":\\\"63e3a0b252e7f50019ed7253\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Tue, 05 Sep 2023 05:54:07 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"47\",\n        \"connection\": \"close\",\n        \"x-powered-by\": \"Express\",\n        \"content-security-policy\": \"default-src * 'self' 'unsafe-inline' 'unsafe-eval' data: gap: content: blob:;style-src 'self' 'unsafe-inline' fonts.googleapis.com;connect-src 'self' *.neutrinos.co data: gap: content: blob: *.googleapis.com;script-src 'self' 'unsafe-inline' 'unsafe-eval' *.neutrinos.co;img-src 'self' data: blob: *.neutrinos.co;base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src-attr 'none';upgrade-insecure-requests\",\n        \"vary\": \"Origin, Accept-Encoding\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"2f-pcUQ7NLGU5OS0ooX4qYkkJu3Kw8\\\"\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n    }\n  }\n]",
                  "code": "let body = startDocData.updateValue(\"job_id\", process.env.JOB_ID_DOCUMENT_NOT_UPLOADED);\nvar resp = await genericMethods.postApiCall(URL_START_DOC_ANALYSIS, {\n  body: JSON.stringify(body),\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, \"Sorry no files to extract\");\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1133:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "a911ee88-600e-4017-95f1-2d250d6d3037",
                  "parentUUID": "44c76de4-5d0a-483f-abd9-38370a97bf43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42d729a4-c807-4383-a694-7206ea8e20e1",
                "fdb34e6d-e34a-48ec-ac9f-efbede9a3a03",
                "0c75466e-8e05-4cd0-ab39-ea8d32818b41"
              ],
              "failures": [
                "92273020-d4a7-4cf3-830b-49408fd38fa5",
                "68cedc18-926f-4dc7-af81-d3c90d6db962",
                "5df22792-be71-4a9c-88bc-f3a876acea49",
                "1d9be39f-45d2-4886-a356-b3f491004cd3",
                "3f424426-d595-4503-ab30-b6780459e7c4",
                "a911ee88-600e-4017-95f1-2d250d6d3037"
              ],
              "pending": [],
              "skipped": [],
              "duration": 18853,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "07d87992-6528-498e-865e-f23cc5fdfe44",
              "title": "Get Job Documents",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_JD_01->To verify that user is able to get job documentt with job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_01->To verify that user is able to get job documentt with job_id",
                  "timedOut": false,
                  "duration": 3108,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "URL_GET_JOB_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/documents`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nFilesDataFetch = true, FilesDataCount = 0;\n// 5s once we are checking the status of the file. max time we wait for record to be DONE is 240s.\ndo {\n  var filesMongoData = (await genericMethods.mongoDBDataFetch(\"files.files\", { \"metadata.job_id\": JOB_ID }));\n  if (filesMongoData !== undefined && filesMongoData.length > 0) {\n    if (filesMongoData[0].metadata.status == \"DONE\") {\n      FilesDataFetch = false;\n    }\n    else if (FilesDataCount >= 48) {\n      FilesDataFetch = false;\n    }\n    else {\n      FilesDataCount++;\n      await delay(5000);\n    }\n  }\n  else {\n    assert.fail(filesMongoData, \"MongoDB Data Fetch is undefined\");\n  }\n} while (FilesDataFetch);\ngenericMethods.addContext(this, 'files.files MongoDBData'.filesMongoData);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  var bodyObj = JSON.parse(resp.body);\n  assert.exists(bodyObj[0][\"_id\"]);\n  assert.equal(bodyObj[0][\"metadata\"][\"job_id\"], JOB_ID);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1173:18)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "33fcc8f4-b610-496f-8373-f1da52633e38",
                  "parentUUID": "07d87992-6528-498e-865e-f23cc5fdfe44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_02->To verify documentt is not fetched when invalid job_id is  provided in the queryparamter",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_02->To verify documentt is not fetched when invalid job_id is  provided in the queryparamter",
                  "timedOut": false,
                  "duration": 2346,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "URL_GET_JOB_DOCUMENT = process.env.BASE_URL + `/api/job/${configData.INVALID_JOB_ID}/documents`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}\n//issue created",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1205:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "c8d8323e-f0b8-4b55-9c35-c2655596ec86",
                  "parentUUID": "07d87992-6528-498e-865e-f23cc5fdfe44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_03->To Verify user is not able to get job document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_03->To Verify user is not able to get job document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 1886,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "URL_GET_JOB_DOCUMENT = process.env.BASE_URL + `/api/job/${configData.INVALID_JOB_ID}/documents`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer Invalid_access_token`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "5e5347a6-c40a-4888-be97-5da4be19a783",
                  "parentUUID": "07d87992-6528-498e-865e-f23cc5fdfe44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 2114,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n  }\n]",
                  "code": "URL_GET_JOB_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/documents`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "1d8e8897-b637-4176-a167-c2b4a8f3ba58",
                  "parentUUID": "07d87992-6528-498e-865e-f23cc5fdfe44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_05->To verify error is thrown if user provides a job_id for which document is not uploaded",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_05->To verify error is thrown if user provides a job_id for which document is not uploaded",
                  "timedOut": false,
                  "duration": 2255,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63e3a0b252e7f50019ed7253\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "URL_GET_JOB_DOCUMENT = process.env.BASE_URL + `/api/job/${process.env.JOB_ID_DOCUMENT_NOT_UPLOADED}/documents`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + process.env.JOB_ID_DOCUMENT_NOT_UPLOADED);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.fail();// created issue to provide message- Document doesn't exists\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}\n//issue created",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1273:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "dcff39ad-0af8-402c-8860-22286ef889e7",
                  "parentUUID": "07d87992-6528-498e-865e-f23cc5fdfe44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e5347a6-c40a-4888-be97-5da4be19a783",
                "1d8e8897-b637-4176-a167-c2b4a8f3ba58"
              ],
              "failures": [
                "33fcc8f4-b610-496f-8373-f1da52633e38",
                "c8d8323e-f0b8-4b55-9c35-c2655596ec86",
                "dcff39ad-0af8-402c-8860-22286ef889e7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 11709,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
              "title": "Get Document Result",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_GDR_01->To verify that user is able to get the document result of the uploaded pdf document",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_01->To verify that user is able to get the document result of the uploaded pdf document",
                  "timedOut": false,
                  "duration": 2116,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  },\n  {\n    \"title\": \"Transformed Engine Results\",\n    \"value\": []\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nvar EngineResultsMongoData = (await genericMethods.mongoDBDataFetch(\"transformed_engine_result\", { \"job_id\": JOB_ID }));\ngenericMethods.addContext(this, 'Transformed Engine Results', EngineResultsMongoData)\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  let bodyObj = JSON.parse(resp.body);\n  assert.exists(bodyObj[0][\"_id\"]);\n  assert.equal(bodyObj[0][\"file_id\"], FILE_ID);\n  assert.equal(bodyObj[0][\"job_id\"], JOB_ID);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1303:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "9223e8eb-e005-4dfc-9352-5be7af1d8e19",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "timedOut": false,
                  "duration": 2297,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${configData.INVALID_JOB_ID}/file/${process.env.INVALID_FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.JOB_ID_REQUIRED_ENGINE_RESULT);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1328:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "da695d24-3b65-472b-9add-58626683e8e7",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "timedOut": false,
                  "duration": 2257,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${process.env.INVALID_FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.FILE_ID_REQUIRED_ENGINE_RESULT);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1351:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "d06768e6-1e66-4d7b-ba5e-7ad456875843",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_04->To verify error is thrown if job_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_04->To verify error is thrown if job_id is invalid",
                  "timedOut": false,
                  "duration": 1593,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${configData.INVALID_JOB_ID}/file/${FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.JOB_ID_REQUIRED_ENGINE_RESULT);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1373:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "6c794cae-ea3f-41e5-a470-249e9508c6b8",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_05->To verify error is thrown if file_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_05->To verify error is thrown if file_id is invalid",
                  "timedOut": false,
                  "duration": 2313,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${configData.INVALID_FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.FILE_ID_REQUIRED_ENGINE_RESULT);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1395:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "1df00e1d-a969-4839-b208-5396f0ca5b04",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "timedOut": false,
                  "duration": 1879,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "f8c2e10f-3813-4436-9e62-50024d363b72",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 1859,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}/result`\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer invalid_access_token`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "d017cf41-5111-4b11-904d-1ce383d2e4a3",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 2073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  assert.equal(bodyObj.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "9121276e-718c-44f6-8cce-e0a1b58cd464",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_09->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_09->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 763,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"Invalid API endpoint\"\n  }\n]",
                  "code": "let JOB_ID = \"\";\nlet URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}/result`\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(404));\n  assert.equal(resp.body, dataValidation.INVALID_ENDPOINT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "f5a5f042-03f1-4588-be67-fbc79333a6a0",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_10->To verify error is thrown if file_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_10->To verify error is thrown if file_id is empty",
                  "timedOut": false,
                  "duration": 756,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"Invalid API endpoint\"\n  }\n]",
                  "code": "let FILE_ID = \"\";\nlet URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(404));\n  assert.equal(resp.body, dataValidation.INVALID_ENDPOINT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "16a4c453-3ca7-4266-a08c-7ad8443e7d42",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_11->To verify error is thrown if the document status is not DONE",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_11->To verify error is thrown if the document status is not DONE",
                  "timedOut": false,
                  "duration": 2302,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefinedFile_id: undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${process.env.JOB_ID_STATUS_NOT_DONE}/file/${process.env.FILE_ID_STATUS_NOT_DONE}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"File_id: \" + FILE_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(resp.body, dataValidation.JOB_ID_DOESNOT_EXISTS);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1533:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "0baa2f34-2590-47b6-8ea7-b918dfe4289c",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_12->To verify error is thrown if Job , Document Analysis is not done",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_12->To verify error is thrown if Job , Document Analysis is not done",
                  "timedOut": false,
                  "duration": 2287,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefinedFile_id: undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${process.env.JOB_ID_DOCUMENT_NOT_ANALYSED}/file/${process.env.FILE_ID_DOCUMENT_NOT_ANALYSED}/result`;\nresp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"File_id: \" + FILE_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(resp.body, dataValidation.FILE_ID_DOESNOT_EXISTS);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1556:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "62e7596a-998d-4843-91a5-63ce412ef552",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_13->To verify error is thrown if job_id removed in URL",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_13->To verify error is thrown if job_id removed in URL",
                  "timedOut": false,
                  "duration": 762,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"Invalid API endpoint\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/file/${FILE_ID}/result`\n      resp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n        headers:\n        {\n          \"tenant\": configData.TENANT,\n          \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n        }\n      })\n      genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n      genericMethods.addContext(this, 'OUTPUT', resp.body);\n      if (resp !== undefined) {\n        assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n        assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(404));\n        assert.equal(resp.body, dataValidation.INVALID_ENDPOINT);\n      }\n      else {\n        assert.fail(resp, \"Response is undefined\");\n      }",
                  "err": {},
                  "uuid": "4cc18b2f-4725-4644-9cc3-68581b8ec3a6",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_14->To verify error is thrown if file_id is removed in URL",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_14->To verify error is thrown if file_id is removed in URL",
                  "timedOut": false,
                  "duration": 2255,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_JOB_DOCUMENT_RESULT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/result`;\n      resp = await genericMethods.getApiCall(URL_GET_JOB_DOCUMENT_RESULT, {\n        headers:\n        {\n          \"tenant\": configData.TENANT,\n          \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n        }\n      })\n      genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n      genericMethods.addContext(this, 'OUTPUT', resp.body);\n      if (resp !== undefined) {\n        assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n        assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n        assert.equal(resp.body, dataValidation.FILE_ID_REQUIRED);\n      }\n      else {\n        assert.fail(resp, \"Response is undefined\");\n      }",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1605:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "e633bc4a-0b0e-48e4-800d-2682f3b5acfe",
                  "parentUUID": "bfbcc347-623f-40dc-a7d0-d9f52ad7bf08",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f8c2e10f-3813-4436-9e62-50024d363b72",
                "d017cf41-5111-4b11-904d-1ce383d2e4a3",
                "9121276e-718c-44f6-8cce-e0a1b58cd464",
                "f5a5f042-03f1-4588-be67-fbc79333a6a0",
                "16a4c453-3ca7-4266-a08c-7ad8443e7d42",
                "4cc18b2f-4725-4644-9cc3-68581b8ec3a6"
              ],
              "failures": [
                "9223e8eb-e005-4dfc-9352-5be7af1d8e19",
                "da695d24-3b65-472b-9add-58626683e8e7",
                "d06768e6-1e66-4d7b-ba5e-7ad456875843",
                "6c794cae-ea3f-41e5-a470-249e9508c6b8",
                "1df00e1d-a969-4839-b208-5396f0ca5b04",
                "0baa2f34-2590-47b6-8ea7-b918dfe4289c",
                "62e7596a-998d-4843-91a5-63ce412ef552",
                "e633bc4a-0b0e-48e4-800d-2682f3b5acfe"
              ],
              "pending": [],
              "skipped": [],
              "duration": 25512,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
              "title": "Get Document",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_GD_01->To verify user is able to get document using valid job_id and file_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_01->To verify user is able to get document using valid job_id and file_id",
                  "timedOut": false,
                  "duration": 2283,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id:undefined\"\n}",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1628:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "3dca080b-9ef0-42b9-83fa-df196f4da1d8",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "timedOut": false,
                  "duration": 2259,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined  file_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${configData.INVALID_JOB_ID}/file/${configData.INVALID_FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.JOB_ID_REQUIRED_GET_DOCUMENT)\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1647:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "170bf807-29c5-46ab-92e0-fdde8708dc31",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "timedOut": false,
                  "duration": 2263,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined  file_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${process.env.INVALID_FILE_ID}`\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.FILE_ID_REQUIRED);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1665:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "3ea48099-5119-4630-9665-37a6502c3270",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_04->To verify error is thrown if job_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_04->To verify error is thrown if job_id is invalid",
                  "timedOut": false,
                  "duration": 2287,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined  file_id:undefined\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${configData.INVALID_JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.JOB_ID_REQUIRED_GET_DOCUMENT);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1687:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "5f40829a-62c3-42bc-bae6-0d11efc02647",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_05->To verify error is thrown if file_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_05->To verify error is thrown if file_id is invalid",
                  "timedOut": false,
                  "duration": 2309,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:undefined  file_id:undefined\"\n  },\n  {\n    \"title\": \"Response\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n  }\n]",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${configData.INVALID_FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\ngenericMethods.addContext(this, 'Response', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.FILE_ID_REQUIRED);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1708:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "1e825ecc-e44c-43e8-bee1-db8148b9356c",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_06->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_06->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 747,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:  file_id:undefined\"\n}",
                  "code": "let JOB_ID = \"\";\nlet URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.body, dataValidation.INVALID_ENDPOINT);\n}\nelse {\n  assert.fail(resp, \" Resopnse is undefined\");\n}",
                  "err": {},
                  "uuid": "81fc6030-349f-4d89-afe4-470b11e5ec88",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_07->To verify error is thrown if file_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_07->To verify error is thrown if file_id is empty",
                  "timedOut": false,
                  "duration": 753,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id:\"\n}",
                  "code": "let FILE_ID = \"\";\nlet URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.body, dataValidation.INVALID_ENDPOINT);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {},
                  "uuid": "aefe9084-65d9-4c8c-badc-4e5bdf3e29eb",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_08->To verify error is thrown if job_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_08->To verify error is thrown if job_id is empty space",
                  "timedOut": false,
                  "duration": 2290,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:   file_id:undefined\"\n}",
                  "code": "let JOB_ID = \" \";\nlet URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.body, dataValidation.JOB_ID_REQUIRED_GET_DOCUMENT);\n}\nelse {\n  assert.fail(\"Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1770:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "3a74132a-e25a-45a4-8136-edc8271bb57d",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_09->To verify error is thrown if file_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_09->To verify error is thrown if file_id is empty space",
                  "timedOut": false,
                  "duration": 770,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id: \"\n}",
                  "code": "let FILE_ID = \" \";\nlet URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.body, dataValidation.INVALID_ENDPOINT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "2e80f361-0822-4a86-9645-5d141000b9f6",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_10->To verify error is thrown if expired access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_10->To verify error is thrown if expired access token is passed",
                  "timedOut": false,
                  "duration": 1171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id:undefined\"\n}",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`\n  }\n})\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "a4aa9890-a31c-4dc5-b379-d51a8563e246",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_10->To verify error is thrown if invalid access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_10->To verify error is thrown if invalid access token is passed",
                  "timedOut": false,
                  "duration": 1909,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id:undefined\"\n}",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer invalid_Access_token`\n  }\n})\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "e4b7fd29-bebd-47be-a8c9-449973436ea2",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_11->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_11->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 2068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id:undefined\"\n}",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "68aeec56-558d-4089-9be7-fd005dd27021",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_12->To verify error is thrown if the tenant is null in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_12->To verify error is thrown if the tenant is null in the request header",
                  "timedOut": false,
                  "duration": 772,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id:undefined\"\n}",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": null,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TENANT_MISSING);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "de1519fe-cb6a-4e4c-b65b-1979aeceda64",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_13->To verify error is thrown if  access token is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_13->To verify error is thrown if  access token is null",
                  "timedOut": false,
                  "duration": 733,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:undefined  file_id:undefined\"\n}",
                  "code": "let URL_GET_DOCUMENT = process.env.BASE_URL + `/api/job/${JOB_ID}/file/${FILE_ID}`;\nresp = await genericMethods.getApiCall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": null\n  }\n})\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "979087e6-6043-4f91-90d8-94e8b922aac4",
                  "parentUUID": "4e9f56ab-9b47-4e71-86d9-616b36935b8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81fc6030-349f-4d89-afe4-470b11e5ec88",
                "aefe9084-65d9-4c8c-badc-4e5bdf3e29eb",
                "2e80f361-0822-4a86-9645-5d141000b9f6",
                "a4aa9890-a31c-4dc5-b379-d51a8563e246",
                "e4b7fd29-bebd-47be-a8c9-449973436ea2",
                "68aeec56-558d-4089-9be7-fd005dd27021",
                "de1519fe-cb6a-4e4c-b65b-1979aeceda64",
                "979087e6-6043-4f91-90d8-94e8b922aac4"
              ],
              "failures": [
                "3dca080b-9ef0-42b9-83fa-df196f4da1d8",
                "170bf807-29c5-46ab-92e0-fdde8708dc31",
                "3ea48099-5119-4630-9665-37a6502c3270",
                "5f40829a-62c3-42bc-bae6-0d11efc02647",
                "1e825ecc-e44c-43e8-bee1-db8148b9356c",
                "3a74132a-e25a-45a4-8136-edc8271bb57d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 22614,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "4ae85f88-866d-4057-98f5-f7e11b8653b4",
              "title": "Get Jobs",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_GJ_01->To verify that all the jobs with respect to the given tenant are fetched",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_01->To verify that all the jobs with respect to the given tenant are fetched",
                  "timedOut": false,
                  "duration": 2955,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n}",
                  "code": "resp = await genericMethods.postApiCall(URL_GET_JOBS, {\n        headers:\n        {\n          \"tenant\": configData.TENANT,\n          \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n        }\n      })\n      genericMethods.addContext(this, \"output\", resp.body);\n      getJobsMongoData = await genericMethods.mongoDBDataFetch(\"jobs\", { \"tenant_id\": `${configData.NEUTRINOS_TENANT_ID}` });\n      if (resp !== undefined) {\n        assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n        let bodyObj = JSON.parse(resp.body);\n        assert.equal(bodyObj.length, getJobsMongoData.length);\n      }\n      else {\n        assert.fail(resp, \"Response is undefined\");\n      }",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1919:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "1b038c69-117a-461b-812f-90f99cb88d3e",
                  "parentUUID": "4ae85f88-866d-4057-98f5-f7e11b8653b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_02->To verify error is thrown if expired access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_02->To verify error is thrown if expired access token is passed",
                  "timedOut": false,
                  "duration": 1860,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n}",
                  "code": "resp = await genericMethods.postApiCall(URL_GET_JOBS, {\n        headers:\n        {\n          \"tenant\": configData.TENANT,\n          \"Authorization\": `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`\n        }\n      })\n      genericMethods.addContext(this, \"output\", resp.body);\n      if (resp !== undefined) {\n        assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n        let bodyObj = JSON.parse(resp.body);\n        assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n      }\n      else {\n        assert.fail(resp, \" is undefined\");\n      }",
                  "err": {},
                  "uuid": "4b84dd1c-ba6e-4bb9-9939-371f79a2de32",
                  "parentUUID": "4ae85f88-866d-4057-98f5-f7e11b8653b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_03->To verify error is thrown if invalid access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_03->To verify error is thrown if invalid access token is passed",
                  "timedOut": false,
                  "duration": 801,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token unavailable\\\"}}\"\n}",
                  "code": "resp = await genericMethods.postApiCall(URL_GET_JOBS, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `invalid_access_token`\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "7919c9f8-c9c6-4aa0-b934-e35183d1542a",
                  "parentUUID": "4ae85f88-866d-4057-98f5-f7e11b8653b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 1352,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n}",
                  "code": "resp = await genericMethods.postApiCall(URL_GET_JOBS, {\n  headers:\n  {\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "cfb2d5ca-873b-46a0-a74b-2ec294b1aa1a",
                  "parentUUID": "4ae85f88-866d-4057-98f5-f7e11b8653b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_05->To verify error is thrown if the tenant is not neutrinos is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_05->To verify error is thrown if the tenant is not neutrinos is null",
                  "timedOut": false,
                  "duration": 770,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"canAccess\\\":false,\\\"reason\\\":\\\"missing tenant header\\\"}}\"\n}",
                  "code": "resp = await genericMethods.postApiCall(URL_GET_JOBS, {\n  headers:\n  {\n    \"tenant\": null,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.reason, dataValidation.TENANT_MISSING);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "af42139a-de7d-41e6-aca8-a424628fa615",
                  "parentUUID": "4ae85f88-866d-4057-98f5-f7e11b8653b4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_06->To verify error is thrown if access token is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_06->To verify error is thrown if access token is null",
                  "timedOut": false,
                  "duration": 745,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token unavailable\\\"}}\"\n}",
                  "code": "resp = await genericMethods.postApiCall(URL_GET_JOBS, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": null\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "1fca6466-1266-4de0-9972-086332f77277",
                  "parentUUID": "4ae85f88-866d-4057-98f5-f7e11b8653b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b84dd1c-ba6e-4bb9-9939-371f79a2de32",
                "7919c9f8-c9c6-4aa0-b934-e35183d1542a",
                "cfb2d5ca-873b-46a0-a74b-2ec294b1aa1a",
                "af42139a-de7d-41e6-aca8-a424628fa615",
                "1fca6466-1266-4de0-9972-086332f77277"
              ],
              "failures": [
                "1b038c69-117a-461b-812f-90f99cb88d3e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 8483,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "IDPTestingReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "timestamp": true,
        "reportDir": "Reporting/IDPTestingReport",
        "reportFilename": "IDPTestingReport",
        "reportTitle": "IDPTesting"
      },
      "version": "4.1.0"
    }
  }
}