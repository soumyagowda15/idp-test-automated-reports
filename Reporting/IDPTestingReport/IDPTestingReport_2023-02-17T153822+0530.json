{
  "stats": {
    "suites": 2,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-17T10:08:15.700Z",
    "end": "2023-02-17T10:08:22.375Z",
    "duration": 6675,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2e20e471-bae3-40a7-8185-3eb14143f790",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cac2efd2-5135-475b-a80e-baad48c0aa9a",
          "title": "Neutrinos Intelligent Document Processing APIs",
          "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "fullTitle": "Neutrinos Intelligent Document Processing APIs \"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "timedOut": false,
              "duration": 367,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", configData.CLIENT_ID);\nbody = dataGeneration.update_AttributeValue(body, \"client_secret\", configData.CLIENT_SECRET);\nlet formBody = [];\nfor (var data in accessTokenTestData) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(accessTokenTestData[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nACCESS_TOKEN = bodyObj.access_token;",
              "err": {},
              "uuid": "c11e34d7-7293-4136-baa1-282f6c6cdcc5",
              "parentUUID": "cac2efd2-5135-475b-a80e-baad48c0aa9a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "063f29a1-ada4-4799-bb44-bb86b2a34e9f",
              "title": "Upload Document to a Job",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_UD_03->To verify only pdf format documnet is supported",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_03->To verify only pdf format documnet is supported",
                  "timedOut": false,
                  "duration": 6298,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": {\n      \"message\": \"Invalid PDF structure.\",\n      \"name\": \"InvalidPDFException\"\n    },\n    \"status\": 500\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/pancard.png`), `pancard.png`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = resp.body\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.INTERNAL_SERVER_ERROR);\n  assert.equal(bodyObj.message.message, dataValidation.INVALID_PDF_STRUCTURE);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "72de554f-b270-4e40-8c08-c3a5045965b3",
                  "parentUUID": "063f29a1-ada4-4799-bb44-bb86b2a34e9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72de554f-b270-4e40-8c08-c3a5045965b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6298,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "IDPTestingReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "timestamp": true,
        "reportDir": "Reporting/IDPTestingReport",
        "reportFilename": "IDPTestingReport",
        "reportTitle": "IDPTestingTesting",
        "reportPageTitle": "ReportTesting",
        "json": "true"
      },
      "version": "4.1.0"
    }
  }
}