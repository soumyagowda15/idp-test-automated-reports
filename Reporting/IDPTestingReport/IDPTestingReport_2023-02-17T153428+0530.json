{
  "stats": {
    "suites": 2,
    "tests": 15,
    "passes": 3,
    "pending": 1,
    "failures": 11,
    "start": "2023-02-17T10:04:14.792Z",
    "end": "2023-02-17T10:04:28.636Z",
    "duration": 13844,
    "testsRegistered": 15,
    "passPercent": 21.428571428571427,
    "pendingPercent": 6.666666666666667,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0ca44e6d-5fa9-4062-aeae-5e52d35978c0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca4af801-2ae7-4c48-8273-3f147aed4b91",
          "title": "Neutrinos Intelligent Document Processing APIs",
          "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "fullTitle": "Neutrinos Intelligent Document Processing APIs \"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "timedOut": false,
              "duration": 334,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", configData.CLIENT_ID);\nbody = dataGeneration.update_AttributeValue(body, \"client_secret\", configData.CLIENT_SECRET);\nlet formBody = [];\nfor (var data in accessTokenTestData) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(accessTokenTestData[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nACCESS_TOKEN = bodyObj.access_token;",
              "err": {},
              "uuid": "db98b3af-eca5-4c2d-94c1-f8997979b345",
              "parentUUID": "ca4af801-2ae7-4c48-8273-3f147aed4b91",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
              "title": "Upload Document to a Job",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_UD_01->To verify user is able to uplaod pdf document successfully with job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_01->To verify user is able to uplaod pdf document successfully with job_id",
                  "timedOut": false,
                  "duration": 7994,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": {\n      \"_id\": \"63ef51249a47c20019939b37\"\n    }\n  },\n  {\n    \"title\": \"Upload Document\",\n    \"value\": [\n      {\n        \"_id\": \"63ef51249a47c20019939b37\",\n        \"length\": 555114,\n        \"chunkSize\": 261120,\n        \"uploadDate\": \"2023-02-17T10:04:22.171Z\",\n        \"filename\": \"Passport.pdf\",\n        \"md5\": \"7b727ed780850fd4c0a6145d1ab50abd\",\n        \"metadata\": {\n          \"filename\": \"Passport.pdf\",\n          \"job_id\": \"63ef20829a47c20019939b1a\",\n          \"created_by\": null,\n          \"filetype\": \"application/pdf\",\n          \"tenant_id\": \"6225cde095f5119c54aa1234\",\n          \"mime_type\": \"application/pdf\",\n          \"size\": 555114,\n          \"fileUUID\": \"d44bc09c-c954-4878-9b5b-cd9015ef7b77\",\n          \"fileurl\": \"gs://6225cde095f5119c54aa1234/63ef20829a47c20019939b1a/d44bc09c-c954-4878-9b5b-cd9015ef7b77/Passport.pdf\",\n          \"reference_id\": null,\n          \"status\": \"CREATED\",\n          \"created_at\": \"2023-02-17T10:04:20.627Z\",\n          \"encoding\": \"7bit\",\n          \"userMetadata\": null,\n          \"client_id\": \"x4PNAVz-EzNX48LFqnOsP\",\n          \"pdf_info\": {\n            \"numpages\": 2,\n            \"info\": null,\n            \"metadata\": null,\n            \"text\": \"\",\n            \"version\": \"2.4.456\"\n          }\n        }\n      }\n    ]\n  }\n]",
                  "code": "chai.use(chaiHttp);\n/* JOB_ID= \"63e1dd7513f5a0003b8d3900\"\nACCESS_TOKEN=\"cZnQUIybh-2IvWwqyhK5N9mSDr3Qm9ZuGshGU6RgK-b\" */\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet uploadDocMongoData = (await genericMethods.mongoDBDataFetch(\"files.files\", { \"metadata.job_id\": JOB_ID }, ''));\ngenericMethods.addContext(this, 'Upload Document', uploadDocMongoData)\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.exists(resp.body[\"_id\"]);\n  FILE_ID=resp.body[\"_id\"];\n  // assertion for other fields are pending\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "6ac7b034-a124-4a0f-b29c-4db8fca83317",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_02->To verify user is able to upload multiple documnets to same job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_02->To verify user is able to upload multiple documnets to same job_id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "3007c83d-8f6b-4a41-b496-69c824be7cf7",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_03->To verify only pdf format documnet is supported",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_03->To verify only pdf format documnet is supported",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/pancard.png`), `pancard.png`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = resp.body\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.INTERNAL_SERVER_ERROR);\n  assert.equal(bodyObj.message.message, dataValidation.INVALID_PDF_STRUCTURE);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\pancard.png'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\pancard.png'",
                    "diff": null
                  },
                  "uuid": "4e8ac3d4-3781-48aa-a792-0499d3c42721",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_04->To verify error is thrown if the job_id sent in the request body is not present in the jobs mongoDB Collections",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_04->To verify error is thrown if the job_id sent in the request body is not present in the jobs mongoDB Collections",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \"Invalid Job_id\")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCode.BAD_REQUEST);\n  //message pending-issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "c7872c5f-2d96-475e-bec9-ea994923f80e",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_05->To Verify Error is thrown if the content-type in the request is not multipart/form-data",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_05->To Verify Error is thrown if the content-type in the request is not multipart/form-data",
                  "timedOut": false,
                  "duration": 767,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": \"<html>\\r\\n<head><title>400 Bad Request</title></head>\\r\\n<body>\\r\\n<center><h1>400 Bad Request</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n\"\n}",
                  "code": "var URL_UPLOAD_DOCUMENT = configData.BASE_URL + ' /api/job/documents/upload';\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(uploadDocument), \"job_id\", \"638f2bcd9ed076003b9cd7dc\");\nresp = await genericMethods.postAPICall(URL_UPLOAD_DOCUMENT, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nassert.fail();\n// Created issue, need to be fixed",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:688:14)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "28e27d5f-eb18-4ec4-b6fc-174e0913f59c",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${configData.EXPIRED_ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "d0cf879a-0bcb-4702-9b68-17162f3e2493",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', \"INVALID_ACCESS_TOKEN\")\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "fbe115e3-bffa-49f9-8d9b-d803ae45a2d0",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'IDP_DEV')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  // assert.equal(bodyObj.result.reason, validation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "30626420-890d-434d-b7fe-5ca0d08a463d",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_09->To verify error is thrown if empty tenant is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_09->To verify error is thrown if empty tenant is passed in the header",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', ' ')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TENANT_MISSING);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "9e3732ad-f7b9-41f5-b914-70216f590cab",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_10->To verify error is thrown if empty access token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_10->To verify error is thrown if empty access token is passed in the header",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', ' ')\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "a622d561-9dac-4588-9f59-bc367d8be76f",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_11->To verify error is thrown if document is not uploaded in request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_11->To verify error is thrown if document is not uploaded in request body",
                  "timedOut": false,
                  "duration": 2334,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid File: The file specified is not a valid format for this endpoint.\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  //.attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "f75edfae-47dd-4557-a560-515da5695864",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_12->To verify error is thrown if job_id is removed in the request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_12->To verify error is thrown if job_id is removed in the request body",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //Issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "b4d04e50-95ea-4f22-afb0-033d5b393f2d",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_13->To verify error is thron if files field is removed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_13->To verify error is thron if files field is removed in the header",
                  "timedOut": false,
                  "duration": 2356,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid File: The file specified is not a valid format for this endpoint.\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "909312e7-4076-42b0-9018-df798130f0a3",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_14->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_14->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \" \")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "c6f74276-58f4-443a-8397-e5f1561ecc91",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_15->To verify error is thrown if job_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_15->To verify error is thrown if job_id is empty space",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \" \")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created--document is uploaded\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "estack": "Error: ENOENT: no such file or directory, open 'D:\\Attachment\\Passport\\Passport.pdf'",
                    "diff": null
                  },
                  "uuid": "33d96f42-10c9-4a7d-8e0f-53d58ed46b72",
                  "parentUUID": "f15e4bbb-8521-4a3e-ae16-78deb8ca3efe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ac7b034-a124-4a0f-b29c-4db8fca83317",
                "f75edfae-47dd-4557-a560-515da5695864",
                "909312e7-4076-42b0-9018-df798130f0a3"
              ],
              "failures": [
                "4e8ac3d4-3781-48aa-a792-0499d3c42721",
                "c7872c5f-2d96-475e-bec9-ea994923f80e",
                "28e27d5f-eb18-4ec4-b6fc-174e0913f59c",
                "d0cf879a-0bcb-4702-9b68-17162f3e2493",
                "fbe115e3-bffa-49f9-8d9b-d803ae45a2d0",
                "30626420-890d-434d-b7fe-5ca0d08a463d",
                "9e3732ad-f7b9-41f5-b914-70216f590cab",
                "a622d561-9dac-4588-9f59-bc367d8be76f",
                "b4d04e50-95ea-4f22-afb0-033d5b393f2d",
                "c6f74276-58f4-443a-8397-e5f1561ecc91",
                "33d96f42-10c9-4a7d-8e0f-53d58ed46b72"
              ],
              "pending": [
                "3007c83d-8f6b-4a41-b496-69c824be7cf7"
              ],
              "skipped": [],
              "duration": 13479,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "IDPTestingReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "timestamp": true,
        "reportDir": "Reporting/IDPTestingReport",
        "reportFilename": "IDPTestingReport",
        "reportTitle": "IDPTestingTesting",
        "reportPageTitle": "ReportTesting",
        "json": "true"
      },
      "version": "4.1.0"
    }
  }
}