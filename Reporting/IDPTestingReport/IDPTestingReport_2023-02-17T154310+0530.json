{
  "stats": {
    "suites": 9,
    "tests": 82,
    "passes": 45,
    "pending": 1,
    "failures": 36,
    "start": "2023-02-17T10:10:44.783Z",
    "end": "2023-02-17T10:13:10.830Z",
    "duration": 146047,
    "testsRegistered": 82,
    "passPercent": 55.55555555555556,
    "pendingPercent": 1.2195121951219512,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "50970b67-951b-4983-b33d-8fe09f002d3a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9bdd2d82-2fbc-4733-9b2a-6061f39fc841",
          "title": "Neutrinos Intelligent Document Processing APIs",
          "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "fullTitle": "Neutrinos Intelligent Document Processing APIs \"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "timedOut": false,
              "duration": 349,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", configData.CLIENT_ID);\nbody = dataGeneration.update_AttributeValue(body, \"client_secret\", configData.CLIENT_SECRET);\nlet formBody = [];\nfor (var data in accessTokenTestData) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(accessTokenTestData[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nACCESS_TOKEN = bodyObj.access_token;",
              "err": {},
              "uuid": "18fae2f0-0684-4231-94a6-4796f78d80a9",
              "parentUUID": "9bdd2d82-2fbc-4733-9b2a-6061f39fc841",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3bffe771-11b4-4a02-b672-9753067e3e6a",
              "title": "Get Access Token",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_AC_01->To verify that access Token is genearted when proper client ID (client should be registered to DEV IDP), client Secret, and grant type is provided in the Input for the Get Access Token POST API ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_01->To verify that access Token is genearted when proper client ID (client should be registered to DEV IDP), client Secret, and grant type is provided in the Input for the Get Access Token POST API ",
                  "timedOut": false,
                  "duration": 983,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": [\n      \"client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ\",\n      \"client_id=x4PNAVz-EzNX48LFqnOsP\",\n      \"grant_type=client_credentials\"\n    ]\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"access_token\\\":\\\"kFSOGm0HWI900zJj5Xt62RuJIOHGEkvlizEuzNBshmT\\\",\\\"expires_in\\\":3600,\\\"token_type\\\":\\\"Bearer\\\"}\"\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", configData.CLIENT_ID);\nbody = dataGeneration.update_AttributeValue(body, \"client_secret\", configData.CLIENT_SECRET);\nlet formBody = [];\nfor (var data in accessTokenTestData) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(accessTokenTestData[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', formBody);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(200));\n  ACCESS_TOKEN = bodyObj.access_token;\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "a30f64f3-fd2c-4b2e-883d-928978c8776d",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_02->To Verify Error is thrown if the Content-Type in the header is not application/x-www-form-urlencoded ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_02->To Verify Error is thrown if the Content-Type in the header is not application/x-www-form-urlencoded ",
                  "timedOut": false,
                  "duration": 441,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&client_id=x4PNAVz-EzNX48LFqnOsP&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_request\\\",\\\"error_description\\\":\\\"only application/x-www-form-urlencoded content-type bodies are supported on POST /token\\\"}\"\n  }\n]",
                  "code": "let formBody = [];\nfor (var data in accessTokenTestData) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(accessTokenTestData[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nvar body = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_CONTENT_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "717eceed-9d21-4e3f-97a8-5e70d7f31f5f",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_03->To verify error is thrown if client_id and client_secret are not of same client",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_03->To verify error is thrown if client_id and client_secret are not of same client",
                  "timedOut": false,
                  "duration": 256,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&client_id=JT8c6UjKar_LfvYr4dcfP&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_client\\\",\\\"error_description\\\":\\\"client authentication failed\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", configData.CLIENT_ID1);\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "94fcc7f0-1e4a-434d-af36-fb7ea4c81f28",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_04->To verify that error is thrown if the grant_type in the Input body is not client_credentials",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_04->To verify that error is thrown if the grant_type in the Input body is not client_credentials",
                  "timedOut": false,
                  "duration": 253,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"grant_type\", \"grant\");\nbody = JSON.parse(body)\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nvar body = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_GRANT_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "8e127f45-4322-42bd-b074-62ff337aa787",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_05->To verify error is thrown if for a client registered in IDP ,client secret is random text in the input body for Get Access Token POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_05->To verify error is thrown if for a client registered in IDP ,client secret is random text in the input body for Get Access Token POST API",
                  "timedOut": false,
                  "duration": 314,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=clientsecret&client_id=x4PNAVz-EzNX48LFqnOsP&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_client\\\",\\\"error_description\\\":\\\"client authentication failed\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_secret\", \"clientsecret\");\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "6a77bdee-544c-47ac-894f-13f61d8bd086",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_06->To verify that error is thrown if the grant_type is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_06->To verify that error is thrown if the grant_type is null",
                  "timedOut": false,
                  "duration": 414,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"grant_type\", null);\nbody = JSON.parse(body)\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nvar body = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_GRANT_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "3ba2a3c0-b878-4488-a703-adc8fea0eb31",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_07->To verify that error is thrown if the grant_type is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_07->To verify that error is thrown if the grant_type is empty",
                  "timedOut": false,
                  "duration": 243,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"grant_type\", \"\");\nbody = JSON.parse(body)\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nvar body = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.MISSING_GRANT_PARAMETER);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "9f156ad8-e8fe-4d79-86c3-9f2cd751e276",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_08->To verify error is thrown if client_id is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_08->To verify error is thrown if client_id is null",
                  "timedOut": false,
                  "duration": 234,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&client_id=null&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_client\\\",\\\"error_description\\\":\\\"client authentication failed\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", null);\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "d842720e-4b4d-42b6-bbb3-b72c8661d037",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_09->To verify error is thrown if client_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_09->To verify error is thrown if client_id is empty",
                  "timedOut": false,
                  "duration": 171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&client_id=&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_request\\\",\\\"error_description\\\":\\\"no client authentication mechanism provided\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", \"\");\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_CLIENT);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "6a6d6bfb-2961-4292-9036-5cfb487a49ae",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_10->To verify error is thrown if client_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_10->To verify error is thrown if client_id is empty space",
                  "timedOut": false,
                  "duration": 413,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&client_id=%20&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_client\\\",\\\"error_description\\\":\\\"client authentication failed\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", \" \");\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "24b956bc-d21b-4c37-8b05-0810b5af3d90",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_11->To verify error is thrown if client_secret is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_11->To verify error is thrown if client_secret is null",
                  "timedOut": false,
                  "duration": 416,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=null&client_id=x4PNAVz-EzNX48LFqnOsP&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_client\\\",\\\"error_description\\\":\\\"client authentication failed\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_secret\", null);\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "c4da063f-5992-4f62-9e2d-3aea6f80aba9",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_12->To verify error is thrown if client_secret is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_12->To verify error is thrown if client_secret is empty",
                  "timedOut": false,
                  "duration": 233,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=&client_id=x4PNAVz-EzNX48LFqnOsP&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_client\\\",\\\"error_description\\\":\\\"client authentication failed\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_secret\", \"\");\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "e5b64c71-5121-4e9b-8196-d9e82519b085",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_13->To verify error is thrown if client_secret is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_13->To verify error is thrown if client_secret is empty space",
                  "timedOut": false,
                  "duration": 256,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT \",\n    \"value\": \"client_secret=%20&client_id=x4PNAVz-EzNX48LFqnOsP&grant_type=client_credentials\"\n  },\n  {\n    \"title\": \"OUTPUT \",\n    \"value\": \"{\\\"error\\\":\\\"invalid_client\\\",\\\"error_description\\\":\\\"client authentication failed\\\"}\"\n  }\n]",
                  "code": "//body=dataGeneration.update_AttributeValue(accessTokenTestData,\"client_secret\",configData.CLIENT_SECRET1);\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_secret\", \" \");\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\ngenericMethods.addContext(this, 'OUTPUT ', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "3f85af6c-5df6-4e94-9827-73d79268f7de",
                  "parentUUID": "3bffe771-11b4-4a02-b672-9753067e3e6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a30f64f3-fd2c-4b2e-883d-928978c8776d",
                "717eceed-9d21-4e3f-97a8-5e70d7f31f5f",
                "94fcc7f0-1e4a-434d-af36-fb7ea4c81f28",
                "8e127f45-4322-42bd-b074-62ff337aa787",
                "6a77bdee-544c-47ac-894f-13f61d8bd086",
                "3ba2a3c0-b878-4488-a703-adc8fea0eb31",
                "9f156ad8-e8fe-4d79-86c3-9f2cd751e276",
                "d842720e-4b4d-42b6-bbb3-b72c8661d037",
                "6a6d6bfb-2961-4292-9036-5cfb487a49ae",
                "24b956bc-d21b-4c37-8b05-0810b5af3d90",
                "c4da063f-5992-4f62-9e2d-3aea6f80aba9",
                "e5b64c71-5121-4e9b-8196-d9e82519b085",
                "3f85af6c-5df6-4e94-9827-73d79268f7de"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4627,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "2437185d-3759-4628-88c8-f1c1a4ba31b2",
              "title": "Create Job",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_CJ_01->To verify Job is created for a client if the proper tenant and access token is provided in the header for '/JOB' POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_01->To verify Job is created for a client if the proper tenant and access token is provided in the header for '/JOB' POST API",
                  "timedOut": false,
                  "duration": 3270,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"[{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"tenant_id\\\":\\\"6225cde095f5119c54aa1234\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"job_name\\\":1676628652600,\\\"created_at\\\":\\\"2023-02-17T10:10:52.600Z\\\",\\\"status\\\":\\\"CREATED\\\",\\\"client_id\\\":\\\"x4PNAVz-EzNX48LFqnOsP\\\",\\\"_id\\\":\\\"63ef52ac9a47c20019939b46\\\"}]\"\n  },\n  {\n    \"title\": \"MongoDb-Jobs\",\n    \"value\": [\n      {\n        \"_id\": \"63ef52ac9a47c20019939b46\",\n        \"job_type\": \"doc_analysis\",\n        \"tenant_id\": \"6225cde095f5119c54aa1234\",\n        \"created_by\": \"{{TENANT_SYSTEM}}\",\n        \"job_name\": 1676628652600,\n        \"created_at\": \"2023-02-17T10:10:52.600Z\",\n        \"status\": \"CREATED\",\n        \"callback_url\": null,\n        \"client_id\": \"x4PNAVz-EzNX48LFqnOsP\"\n      }\n    ]\n  }\n]",
                  "code": "/*  ACCESS_TOKEN=\"ZPdZnoYptBVIGNuwT4Tq4KXIKsZ5pvj4pK3aYPjDDUP\" */\nlet body = JSON.stringify(createJobTestData);\nresp = await genericMethods.postAPICall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp.body);\nvar bodyObj = JSON.parse(resp.body);\njobsMongoData = await genericMethods.mongoDBDataFetch(\"jobs\", { \"job_name\": bodyObj[0].job_name});\ngenericMethods.addContext(this, 'MongoDb-Jobs', jobsMongoData);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(200));\n  JOB_ID = bodyObj[0]._id;\n  assert.equal(bodyObj[0].job_type, \"doc_analysis\");\n  assert.exists(bodyObj[0].tenant_id);\n  assert.exists(bodyObj[0].job_name);\n  assert.exists(bodyObj[0].status);\n  assert.equal(bodyObj[0].client_id, configData.CLIENT_ID);\n  assert.exists(bodyObj[0]._id);\n}\nelse {\n  assert.fail(resp, \"is undefined\")\n}",
                  "err": {},
                  "uuid": "c9a36b34-ab75-46a4-aa21-14aa10e3af7b",
                  "parentUUID": "2437185d-3759-4628-88c8-f1c1a4ba31b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_02->To verify job is not created if expired access Token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_02->To verify job is not created if expired access Token is passed",
                  "timedOut": false,
                  "duration": 1924,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"dev-idp.neutrinos.co\",\n      \"hostname\": \"dev-idp.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://dev-idp.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"dev-idp.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"dev-idp.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://dev-idp.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer XZID-4oErmMFGGjKWK0UgAHVXDUfY5KzQnUwfagzWO-\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 60\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Fri, 17 Feb 2023 10:10:55 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"94\",\n        \"connection\": \"close\",\n        \"content-security-policy\": \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\",\n        \"x-dns-prefetch-control\": \"off\",\n        \"expect-ct\": \"max-age=0\",\n        \"x-frame-options\": \"SAMEORIGIN\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\",\n        \"x-download-options\": \"noopen\",\n        \"x-content-type-options\": \"nosniff\",\n        \"x-permitted-cross-domain-policies\": \"none\",\n        \"referrer-policy\": \"no-referrer\",\n        \"x-xss-protection\": \"0\",\n        \"vary\": \"Origin\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"5e-FpxP0i0b+BDpEOlwGcg5x3szWSo\\\"\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n    }\n  }\n]",
                  "code": "let body = JSON.stringify(createJobTestData);\nresp = await genericMethods.postAPICall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${configData.EXPIRED_ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.active, false);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "c0f0f359-def3-483e-b506-c37a855549c6",
                  "parentUUID": "2437185d-3759-4628-88c8-f1c1a4ba31b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_03->To verify that job is not created when client is not registered to DEV IDP",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_03->To verify that job is not created when client is not registered to DEV IDP",
                  "timedOut": false,
                  "duration": 2727,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"dev-idp.neutrinos.co\",\n      \"hostname\": \"dev-idp.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://dev-idp.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"dev-idp.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"dev-idp.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://dev-idp.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer n2zvhea3H9CRLMTD_vJbLYGqv40J-azrU3PpAUn4UXY\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 60\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Fri, 17 Feb 2023 10:10:58 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"47\",\n        \"connection\": \"close\",\n        \"content-security-policy\": \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\",\n        \"x-dns-prefetch-control\": \"off\",\n        \"expect-ct\": \"max-age=0\",\n        \"x-frame-options\": \"SAMEORIGIN\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\",\n        \"x-download-options\": \"noopen\",\n        \"x-content-type-options\": \"nosniff\",\n        \"x-permitted-cross-domain-policies\": \"none\",\n        \"referrer-policy\": \"no-referrer\",\n        \"x-xss-protection\": \"0\",\n        \"vary\": \"Origin\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"2f-pcUQ7NLGU5OS0ooX4qYkkJu3Kw8\\\"\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n    }\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(accessTokenTestData), \"client_id\", configData.UNREGISTERED_CLIENT_ID);\nbody = dataGeneration.update_AttributeValue(body, \"client_secret\", configData.UNREGISTERED_CLIENT_SECRET);\nbody = JSON.parse(body);\nlet formBody = [];\nfor (var data in body) {\n  var encodedKey = encodeURIComponent(data);\n  var encodedValue = encodeURIComponent(body[data]);\n  formBody.push(encodedKey + \"=\" + encodedValue);\n}\nbody = formBody.join(\"&\");\nresp = await genericMethods.postAPICall(URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nUNREGISTERED_CLIENT_ACCESS_TOKEN = JSON.parse(resp.body).access_token;\nlet createJobbody = JSON.stringify(createJobTestData);\nresp = await genericMethods.postAPICall(URL_CREATE_JOB, {\n  body: createJobbody,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${UNREGISTERED_CLIENT_ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', createJobbody);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.message, validation.UNREGISTERED_CLIENT);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "05c4f39b-1bbc-4554-8e64-942e4d9055c9",
                  "parentUUID": "2437185d-3759-4628-88c8-f1c1a4ba31b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_04->To verify error is thrown if tenant is not neutrinos",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_04->To verify error is thrown if tenant is not neutrinos",
                  "timedOut": false,
                  "duration": 2083,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n  }\n]",
                  "code": "let body = JSON.stringify(createJobTestData);\nresp = await genericMethods.postAPICall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp.body);\nif (resp !== undefined) {\n  var bodyObj = JSON.parse(resp.body);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  assert.equal(bodyObj.message, validation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"is undefined\")\n}",
                  "err": {},
                  "uuid": "cf9f52b6-a501-4648-941e-505f4e4f932f",
                  "parentUUID": "2437185d-3759-4628-88c8-f1c1a4ba31b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_05->To verify error is thrown if payload is not JSON",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_05->To verify error is thrown if payload is not JSON",
                  "timedOut": false,
                  "duration": 2322,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"Invalid Payload\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"{\\\"message\\\":\\\"Unknown Job Type, could not create job.\\\",\\\"status\\\":500}\"\n  }\n]",
                  "code": "/*  ACCESS_TOKEN=\"Qm4AkXZdjBmKpfoL3rFpYu63p3SZdKqTS74bXtRlKuK\" */\nlet body = \"Invalid Payload\"\nresp = await genericMethods.postAPICall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"text/plain\",\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}",
                  "err": {
                    "message": "AssertionError: expected 500 to equal 400",
                    "estack": "AssertionError: expected 500 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:562:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 500\n+ 400\n"
                  },
                  "uuid": "26cba52c-9dca-4c38-b813-07e0952d098e",
                  "parentUUID": "2437185d-3759-4628-88c8-f1c1a4ba31b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_06->To verify job is not created if invalid access Token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_AC_06->To verify job is not created if invalid access Token is passed",
                  "timedOut": false,
                  "duration": 1889,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"dev-idp.neutrinos.co\",\n      \"hostname\": \"dev-idp.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://dev-idp.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"dev-idp.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"dev-idp.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://dev-idp.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer INVALID_ACCESS_TOKEN\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 60\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Fri, 17 Feb 2023 10:11:04 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"94\",\n        \"connection\": \"close\",\n        \"content-security-policy\": \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\",\n        \"x-dns-prefetch-control\": \"off\",\n        \"expect-ct\": \"max-age=0\",\n        \"x-frame-options\": \"SAMEORIGIN\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\",\n        \"x-download-options\": \"noopen\",\n        \"x-content-type-options\": \"nosniff\",\n        \"x-permitted-cross-domain-policies\": \"none\",\n        \"referrer-policy\": \"no-referrer\",\n        \"x-xss-protection\": \"0\",\n        \"vary\": \"Origin\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"5e-FpxP0i0b+BDpEOlwGcg5x3szWSo\\\"\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n    }\n  }\n]",
                  "code": "let body = JSON.stringify(createJobTestData);\nresp = await genericMethods.postAPICall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer INVALID_ACCESS_TOKEN`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.active, false);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "2e2d9275-610a-4f10-84b9-57547e6659b5",
                  "parentUUID": "2437185d-3759-4628-88c8-f1c1a4ba31b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9a36b34-ab75-46a4-aa21-14aa10e3af7b",
                "c0f0f359-def3-483e-b506-c37a855549c6",
                "05c4f39b-1bbc-4554-8e64-942e4d9055c9",
                "cf9f52b6-a501-4648-941e-505f4e4f932f",
                "2e2d9275-610a-4f10-84b9-57547e6659b5"
              ],
              "failures": [
                "26cba52c-9dca-4c38-b813-07e0952d098e"
              ],
              "pending": [],
              "skipped": [],
              "duration": 14215,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
              "title": "Upload Document to a Job",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_UD_01->To verify user is able to uplaod pdf document successfully with job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_01->To verify user is able to uplaod pdf document successfully with job_id",
                  "timedOut": false,
                  "duration": 7416,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": {\n      \"_id\": \"63ef52bd9a47c20019939b49\"\n    }\n  },\n  {\n    \"title\": \"Upload Document\",\n    \"value\": [\n      {\n        \"_id\": \"63ef52bd9a47c20019939b49\",\n        \"length\": 555114,\n        \"chunkSize\": 261120,\n        \"uploadDate\": \"2023-02-17T10:11:10.695Z\",\n        \"filename\": \"Passport.pdf\",\n        \"md5\": \"7b727ed780850fd4c0a6145d1ab50abd\",\n        \"metadata\": {\n          \"filename\": \"Passport.pdf\",\n          \"job_id\": \"63ef52ac9a47c20019939b46\",\n          \"created_by\": null,\n          \"filetype\": \"application/pdf\",\n          \"tenant_id\": \"6225cde095f5119c54aa1234\",\n          \"mime_type\": \"application/pdf\",\n          \"size\": 555114,\n          \"fileUUID\": \"3753ebef-c041-4026-a81f-26aed0ed2551\",\n          \"fileurl\": \"gs://6225cde095f5119c54aa1234/63ef52ac9a47c20019939b46/3753ebef-c041-4026-a81f-26aed0ed2551/Passport.pdf\",\n          \"reference_id\": null,\n          \"status\": \"CREATED\",\n          \"created_at\": \"2023-02-17T10:11:09.152Z\",\n          \"encoding\": \"7bit\",\n          \"userMetadata\": null,\n          \"client_id\": \"x4PNAVz-EzNX48LFqnOsP\",\n          \"pdf_info\": {\n            \"numpages\": 2,\n            \"info\": null,\n            \"metadata\": null,\n            \"text\": \"\",\n            \"version\": \"2.4.456\"\n          }\n        }\n      }\n    ]\n  }\n]",
                  "code": "chai.use(chaiHttp);\n/* JOB_ID= \"63e1dd7513f5a0003b8d3900\"\nACCESS_TOKEN=\"cZnQUIybh-2IvWwqyhK5N9mSDr3Qm9ZuGshGU6RgK-b\" */\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet uploadDocMongoData = (await genericMethods.mongoDBDataFetch(\"files.files\", { \"metadata.job_id\": JOB_ID }, ''));\ngenericMethods.addContext(this, 'Upload Document', uploadDocMongoData)\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.exists(resp.body[\"_id\"]);\n  FILE_ID=resp.body[\"_id\"];\n  // assertion for other fields are pending\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "46e4cdcb-5c1e-48cf-af6a-8f686f09cdf6",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_02->To verify user is able to upload multiple documnets to same job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_02->To verify user is able to upload multiple documnets to same job_id",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "1ca47270-6f83-466b-b94a-cf8df62cd97e",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_03->To verify only pdf format documnet is supported",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_03->To verify only pdf format documnet is supported",
                  "timedOut": false,
                  "duration": 6392,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": {\n      \"message\": \"Invalid PDF structure.\",\n      \"name\": \"InvalidPDFException\"\n    },\n    \"status\": 500\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/pancard.png`), `pancard.png`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = resp.body\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.INTERNAL_SERVER_ERROR);\n  assert.equal(bodyObj.message.message, dataValidation.INVALID_PDF_STRUCTURE);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "82350f6f-3493-453c-b809-e0697ab5d32a",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_04->To verify error is thrown if the job_id sent in the request body is not present in the jobs mongoDB Collections",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_04->To verify error is thrown if the job_id sent in the request body is not present in the jobs mongoDB Collections",
                  "timedOut": false,
                  "duration": 4137,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid params: job_id is a required property to upload files to a job\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \"Invalid Job_id\")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCode.BAD_REQUEST);\n  //message pending-issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 400 to equal undefined",
                    "estack": "AssertionError: expected 400 to equal undefined\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:665:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "f0afc438-209f-4ed4-8d3b-983e2dd4c659",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_05->To Verify Error is thrown if the content-type in the request is not multipart/form-data",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_05->To Verify Error is thrown if the content-type in the request is not multipart/form-data",
                  "timedOut": false,
                  "duration": 770,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": \"<html>\\r\\n<head><title>400 Bad Request</title></head>\\r\\n<body>\\r\\n<center><h1>400 Bad Request</h1></center>\\r\\n<hr><center>nginx</center>\\r\\n</body>\\r\\n</html>\\r\\n\"\n}",
                  "code": "var URL_UPLOAD_DOCUMENT = configData.BASE_URL + ' /api/job/documents/upload';\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(uploadDocument), \"job_id\", \"638f2bcd9ed076003b9cd7dc\");\nresp = await genericMethods.postAPICall(URL_UPLOAD_DOCUMENT, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nassert.fail();\n// Created issue, need to be fixed",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:687:14)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "c3f717e2-91fa-41cd-82ff-1359f1a427ba",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "timedOut": false,
                  "duration": 3737,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"result\": {\n      \"active\": false,\n      \"canAccess\": false,\n      \"reason\": \"Token expired or invalid\"\n    }\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${configData.EXPIRED_ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "76bef8c7-5c23-4b76-8e22-2ca929bd1bd2",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 2304,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"result\": {\n      \"canAccess\": false,\n      \"reason\": \"Token unavailable\"\n    }\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', \"INVALID_ACCESS_TOKEN\")\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "cf3df95d-7740-46b4-acdd-ee51d12e6015",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 3890,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"message\": \"invalid tenant.\"\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'IDP_DEV')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  // assert.equal(bodyObj.result.reason, validation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "bd9e08b4-4a8d-4893-9fde-89fb9f3d65c8",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_09->To verify error is thrown if empty tenant is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_09->To verify error is thrown if empty tenant is passed in the header",
                  "timedOut": false,
                  "duration": 2560,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"result\": {\n      \"canAccess\": false,\n      \"reason\": \"missing tenant header\"\n    }\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', ' ')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TENANT_MISSING);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "df927bb8-047f-4b66-b92a-70e5756dfe13",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_10->To verify error is thrown if empty access token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_10->To verify error is thrown if empty access token is passed in the header",
                  "timedOut": false,
                  "duration": 2827,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"status\": 403,\n    \"result\": {\n      \"canAccess\": false,\n      \"reason\": \"Token unavailable\"\n    }\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', ' ')\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "487ca89e-3745-4a0d-a3e1-b441746be9ac",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_11->To verify error is thrown if document is not uploaded in request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_11->To verify error is thrown if document is not uploaded in request body",
                  "timedOut": false,
                  "duration": 2341,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid File: The file specified is not a valid format for this endpoint.\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  //.attach('files', fs.createReadStream(`../../../Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "d6fe63b7-c6c8-4146-ae2d-7aa667d5d842",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_12->To verify error is thrown if job_id is removed in the request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_12->To verify error is thrown if job_id is removed in the request body",
                  "timedOut": false,
                  "duration": 4171,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid params: job_id is a required property to upload files to a job\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //Issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "310d61e8-df5e-4019-be6d-e4150f46f474",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_13->To verify error is thron if files field is removed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_13->To verify error is thron if files field is removed in the header",
                  "timedOut": false,
                  "duration": 2295,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid File: The file specified is not a valid format for this endpoint.\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .field('job_id', JOB_ID)\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "260b9658-1da2-4991-bf1c-2906c5767ed8",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_14->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_14->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 4360,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid params: job_id is a required property to upload files to a job\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \" \")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "41505321-a50d-428d-b600-77c93f11e5c5",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_UD_15->To verify error is thrown if job_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Upload Document to a Job TC_UD_15->To verify error is thrown if job_id is empty space",
                  "timedOut": false,
                  "duration": 4213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"OUTPUT\",\n  \"value\": {\n    \"message\": \"Invalid params: job_id is a required property to upload files to a job\",\n    \"status\": 400\n  }\n}",
                  "code": "chai.use(chaiHttp);\nconst api = chai.request(configData.BASE_URL)\nvar resp = await api.post(\"/api/job/documents/upload\")\n  .set('Content-Type', 'multipart/form-data')\n  .set('tenant', 'neutrinos')\n  .set('Authorization', `Bearer ${ACCESS_TOKEN}`)\n  .attach('files', fs.createReadStream(`Attachment/Passport/Passport.pdf`), `Passport.pdf`)\n  .field('job_id', \" \")\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = (resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.status, HTTPStatusCodes.BAD_REQUEST);\n  //issue created--document is uploaded\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "b81c0201-5575-409e-b359-c57c014b25b7",
                  "parentUUID": "1a1742ee-307c-4657-99ef-7faa10e2f9b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46e4cdcb-5c1e-48cf-af6a-8f686f09cdf6",
                "82350f6f-3493-453c-b809-e0697ab5d32a",
                "76bef8c7-5c23-4b76-8e22-2ca929bd1bd2",
                "cf3df95d-7740-46b4-acdd-ee51d12e6015",
                "bd9e08b4-4a8d-4893-9fde-89fb9f3d65c8",
                "df927bb8-047f-4b66-b92a-70e5756dfe13",
                "487ca89e-3745-4a0d-a3e1-b441746be9ac",
                "d6fe63b7-c6c8-4146-ae2d-7aa667d5d842",
                "310d61e8-df5e-4019-be6d-e4150f46f474",
                "260b9658-1da2-4991-bf1c-2906c5767ed8",
                "41505321-a50d-428d-b600-77c93f11e5c5",
                "b81c0201-5575-409e-b359-c57c014b25b7"
              ],
              "failures": [
                "f0afc438-209f-4ed4-8d3b-983e2dd4c659",
                "c3f717e2-91fa-41cd-82ff-1359f1a427ba"
              ],
              "pending": [
                "1ca47270-6f83-466b-b94a-cf8df62cd97e"
              ],
              "skipped": [],
              "duration": 51413,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "218721f6-18b1-4e10-8faf-b43579df8e8b",
              "title": "Start Document Analysis",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_SDA_01->To verify Document is processed successfully if access_token , tenant is passed in the request header and job_id in body for '/api/job/start-doc-analysis' POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_01->To verify Document is processed successfully if access_token , tenant is passed in the request header and job_id in body for '/api/job/start-doc-analysis' POST API",
                  "timedOut": false,
                  "duration": 4013,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"63ef52ac9a47c20019939b46\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"\"\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(DocumentAnalysis), \"job_id\", JOB_ID);\n var resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n   body: body,\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n     \"Content-Type\": \"application/json\"\n   }\n })\n genericMethods.addContext(this, 'INPUT', body);\n genericMethods.addContext(this, 'OUTPUT', resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n }\n else {\n   assert.fail(\"resp is undefined\", resp)\n }",
                  "err": {},
                  "uuid": "ccc55f62-9689-4012-a441-86d5a180e102",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_02->To verify error is thrown if invalid job_id is passed in the request body for '/api/job/start-doc-analysis' POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_02->To verify error is thrown if invalid job_id is passed in the request body for '/api/job/start-doc-analysis' POST API",
                  "timedOut": false,
                  "duration": 1184,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"Invalid_job_id\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(DocumentAnalysis), \"job_id\", \"Invalid_job_id\");\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer y2yeiL1ieF1xWIkWMj6ywhWZIAvzxXcSYcLCUcSdarU`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:929:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "ec1fb701-4e05-4558-86e0-3e373c9d2f4a",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_03->To verify Document is not processed if expired access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_03->To verify Document is not processed if expired access token is passed",
                  "timedOut": false,
                  "duration": 1886,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"Invalid_job_id\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(DocumentAnalysis), \"job_id\", \"Invalid_job_id\");\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${configData.EXPIRED_ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {},
                  "uuid": "ac94e789-0a85-44f2-b62a-1c10fa255f48",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_04->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_04->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 1864,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"Invalid_job_id\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(DocumentAnalysis), \"job_id\", \"Invalid_job_id\");\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${configData.EXPIRED_ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {},
                  "uuid": "72390c62-f01a-4e38-b4ce-80a9ef10888b",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_05->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_05->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 2138,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"Invalid_job_id\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(DocumentAnalysis), \"job_id\", \"Invalid_job_id\");\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": \"IDP_DEV\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.message, validation.INVALID_TENANT);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {},
                  "uuid": "ad780a1b-926e-487f-b1a9-69ed08bdf3a5",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_06->To verify error is thrown if payload is not JSON",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_06->To verify error is thrown if payload is not JSON",
                  "timedOut": false,
                  "duration": 2292,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"Invalid Payload\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"Invalid params:job_id is a required property to Start document analysis\"\n  }\n]",
                  "code": "let body = \"Invalid Payload\"\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"text/plain\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "22ddae0e-a9bf-4e08-b945-0e1f1e1746de",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_07->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_07->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 1165,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let body = dataGeneration.update_AttributeValue(JSON.stringify(DocumentAnalysis), \"job_id\", \"\");\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer cIwRL8t79wJPwyQc12k6qFX58loXrjX4fdoweNTJ-DA`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\n// issue created\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}\nelse {\n  assert.fail(\"resp is undefined\", resp)\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1037:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "660b3da0-6625-4867-ac30-2bf0290730be",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_08->To verify error is thrown if job_id is removed in the request body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_08->To verify error is thrown if job_id is removed in the request body",
                  "timedOut": false,
                  "duration": 1856,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let body = dataGeneration.remove_Attribute(JSON.stringify(DocumentAnalysis), \"job_id\");\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer cIwRL8t79wJPwyQc12k6qFX58loXrjX4fdoweNTJ-DA`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1057:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "a07066f4-7c25-410b-a51c-c39c813767c3",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_SDA_09->To verify error is thrown if for the given job_id documents are not uploaded ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Start Document Analysis TC_SDA_09->To verify error is thrown if for the given job_id documents are not uploaded ",
                  "timedOut": false,
                  "duration": 1860,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"{\\\"job_id\\\":\\\"63e3a0b252e7f50019ed7253\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let JOB_ID = configData.JOB_ID_DOCUMENT_NOT_UPLOADED;\nACCESS_TOKEN = \"Qm4AkXZdjBmKpfoL3rFpYu63p3SZdKqTS74bXtRlKuK\"\nlet body = dataGeneration.update_AttributeValue(JSON.stringify(DocumentAnalysis), \"job_id\", JOB_ID);\nvar resp = await genericMethods.postAPICall(URL_START_DOC_ANALYSIS, {\n  body: body,\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`,\n    \"Content-Type\": \"application/json\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT', body);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  //issue created\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1080:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "78f17f31-b515-4e7e-9f6b-718d2125c848",
                  "parentUUID": "218721f6-18b1-4e10-8faf-b43579df8e8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ccc55f62-9689-4012-a441-86d5a180e102",
                "ac94e789-0a85-44f2-b62a-1c10fa255f48",
                "72390c62-f01a-4e38-b4ce-80a9ef10888b",
                "ad780a1b-926e-487f-b1a9-69ed08bdf3a5",
                "22ddae0e-a9bf-4e08-b945-0e1f1e1746de"
              ],
              "failures": [
                "ec1fb701-4e05-4558-86e0-3e373c9d2f4a",
                "660b3da0-6625-4867-ac30-2bf0290730be",
                "a07066f4-7c25-410b-a51c-c39c813767c3",
                "78f17f31-b515-4e7e-9f6b-718d2125c848"
              ],
              "pending": [],
              "skipped": [],
              "duration": 18258,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "9f2a5f12-3cc1-4526-baa1-4c4cee6e7d29",
              "title": "Get Job Documents",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_JD_01->To verify that user is able to get job documnet with job_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_01->To verify that user is able to get job documnet with job_id",
                  "timedOut": false,
                  "duration": 1858,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT = `/api/job/${JOB_ID}/documents`;\nURL_GET_JOB_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT;\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  var bodyObj = JSON.parse(resp.body);\n  assert.exists(bodyObj[0][\"_id\"]);\n  assert.equal(bodyObj[0][\"metadata\"][\"job_id\"], JOB_ID);\n  FilesDataFetch = true, FilesDataCount = 0;\n  do {\n    var filesMongoData = (await genericMethods.mongoDBDataFetch(\"files.files\", { \"metadata.job_id\": bodyObj[0].metadata.job_id }, ''));\n    if (filesMongoData !== undefined && filesMongoData.length > 0) {\n      if (filesMongoData[0].metadata.status == \"DONE\") {\n        FilesDataFetch = false;\n      } else if (FilesDataCount >= 22) {\n        FilesDataFetch = false;\n      }\n      else {\n        FilesDataCount++;\n        await delay(5000);\n      }\n    }\n    else {\n      assert.fail(filesMongoData, \" is undefined\");\n    }\n  } while (FilesDataFetch)\n}\nelse {\n  assert.fail(\" Response is undefined\", resp);\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1103:16)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "745e0e04-03e8-4879-a4af-8fd6bbf63be3",
                  "parentUUID": "9f2a5f12-3cc1-4526-baa1-4c4cee6e7d29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_02->To verify documentt is not fetched when invalid job_id is  provided in the queryparamter",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_02->To verify documentt is not fetched when invalid job_id is  provided in the queryparamter",
                  "timedOut": false,
                  "duration": 1861,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT = `/api/job/${JOB_ID}/documents`;\n   URL_GET_JOB_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT;\n   resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT, {\n     headers:\n     {\n       \"tenant\": configData.TENANT,\n       \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n     }\n   })\n   genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n   genericMethods.addContext(this, 'OUTPUT', resp.body);\n   if (resp !== undefined) {\n     assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n   }\n   else {\n     assert.fail(resp, \" is undefined\");\n   }\n   //issue created",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1145:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "c4319b41-c9c4-4cc5-9246-a0fb4f98b721",
                  "parentUUID": "9f2a5f12-3cc1-4526-baa1-4c4cee6e7d29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_03->To Verify user is not able to get job document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_03->To Verify user is not able to get job document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 1859,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer Invalid_access_token`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "e57d6c49-47c5-4cc1-9210-e12eb3a03bb8",
                  "parentUUID": "9f2a5f12-3cc1-4526-baa1-4c4cee6e7d29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 1871,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nlet bodyObj = resp.body;\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(bodyObj.message, validation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'invalid tenant.'",
                    "estack": "AssertionError: expected undefined to equal 'invalid tenant.'\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1185:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "d8f8930f-ada9-4f22-8033-1fcc0994bb26",
                  "parentUUID": "9f2a5f12-3cc1-4526-baa1-4c4cee6e7d29",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_JD_05->To verify error is thrown if user provides a job_id for which document is not uploaded",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Job Documents TC_JD_05->To verify error is thrown if user provides a job_id for which document is not uploaded",
                  "timedOut": false,
                  "duration": 1860,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63e3a0b252e7f50019ed7253\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT = `/api/job/${configData.JOB_ID_DOCUMENT_NOT_UPLOADED}/documents`;\n  URL_GET_JOB_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT;\n  resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT, {\n    headers:\n    {\n      \"tenant\": configData.TENANT,\n      \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n    }\n  })\n  genericMethods.addContext(this, 'INPUT', \"job_id:\" +configData.JOB_ID_DOCUMENT_NOT_UPLOADED);\n  genericMethods.addContext(this, 'OUTPUT', resp.body);\n  if (resp !== undefined) {\n    assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  }\n  else {\n    assert.fail(resp, \" is undefined\");\n  }\n  //issue created",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1204:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "cdc64774-6aee-4ff3-9ad5-dea0b318b2b4",
                  "parentUUID": "9f2a5f12-3cc1-4526-baa1-4c4cee6e7d29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e57d6c49-47c5-4cc1-9210-e12eb3a03bb8"
              ],
              "failures": [
                "745e0e04-03e8-4879-a4af-8fd6bbf63be3",
                "c4319b41-c9c4-4cc5-9246-a0fb4f98b721",
                "d8f8930f-ada9-4f22-8033-1fcc0994bb26",
                "cdc64774-6aee-4ff3-9ad5-dea0b318b2b4"
              ],
              "pending": [],
              "skipped": [],
              "duration": 9309,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
              "title": "Get Document Result",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_GDR_01->To verify that user is able to get the document result of the uploaded pdf document",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_01->To verify that user is able to get the document result of the uploaded pdf document",
                  "timedOut": false,
                  "duration": 2533,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  },\n  {\n    \"title\": \"Transformed Engine Results\",\n    \"value\": []\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\n URL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\n resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n genericMethods.addContext(this, 'OUTPUT', resp.body);\n var EngineResultsMongoData = (await genericMethods.mongoDBDataFetch(\"transformed_engine_result\", { \"job_id\": JOB_ID }, ''));\n genericMethods.addContext(this, 'Transformed Engine Results', EngineResultsMongoData)\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n   let bodyObj = JSON.parse(resp.body);\n   assert.exists(bodyObj[0][\"_id\"]);\n   assert.equal(bodyObj[0][\"file_id\"], FILE_ID);\n   assert.equal(bodyObj[0][\"job_id\"], JOB_ID);\n }\n else {\n   assert.fail(\"Response is undefined\", resp);\n }",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1229:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "148fbcb1-b2eb-4b58-bd3d-b03387a5ce4b",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\n      URL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\n      assert.fail(undefined);\n      resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n        headers:\n        {\n          \"tenant\": configData.TENANT,\n          \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n        }\n      })\n      genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n      genericMethods.addContext(this, 'OUTPUT', resp.body);\n      //issue created",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1243:14)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "385eb405-cd6e-491d-b901-6f3bc24d4341",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.fail(undefined);\n resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n genericMethods.addContext(this, 'OUTPUT', resp.body);",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1257:13)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "7c77d094-bfae-4a81-9d9a-3339c1d48a91",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_04->To verify error is thrown if job_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_04->To verify error is thrown if job_id is invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.fail(undefined);\n resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n genericMethods.addContext(this, 'OUTPUT', resp.body);",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1269:13)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "2ae57c21-f8ae-416a-8b08-47615f0eabc4",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_05->To verify error is thrown if file_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_05->To verify error is thrown if file_id is invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "assert.fail(undefined);\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1281:14)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "678c5070-159a-4b27-a172-22583f1619d3",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_06->To Verify user is not able to upload the document if expired access Token is passed in the header",
                  "timedOut": false,
                  "duration": 2020,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\nURL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${configData.EXPIRED_ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = (resp.body);\n  //assert message\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "42409372-b3df-4a69-980e-75e062a4f90b",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_07->To Verify user is not able to upload the document if Invalid access Token is passed in the header",
                  "timedOut": false,
                  "duration": 1177,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\n URL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\n resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer invalid_access_token`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n genericMethods.addContext(this, 'OUTPUT', resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n   let bodyObj = (resp.body);\n   //assert message\n }\n else {\n   assert.fail(resp, \"is undefined\");\n }",
                  "err": {},
                  "uuid": "f6d3e1b0-baa0-41de-9a09-c3bdce02e80f",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_08->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 1982,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\nURL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  //assert message\n  let bodyObj = (resp.body);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "6dd4c91c-a580-46f8-94a7-3bd1dd7173a6",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_09->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_09->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 1897,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\n URL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\n resp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\n genericMethods.addContext(this, 'OUTPUT', resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(404));\n   assert.equal(resp.body, validation.INVALID_ENDPOINT);\n   //assert message\n   let bodyObj = (resp.body);\n }\n else {\n   assert.fail(resp, \"is undefined\");\n }",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 404",
                    "estack": "AssertionError: expected 403 to equal 404\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1371:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 404\n"
                  },
                  "uuid": "526c1de1-372a-43ea-b491-dcf048284c34",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_10->To verify error is thrown if file_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_10->To verify error is thrown if file_id is empty",
                  "timedOut": false,
                  "duration": 1919,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\nURL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(404));\n  assert.equal(resp.body, validation.INVALID_ENDPOINT);\n  //assert message\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 404",
                    "estack": "AssertionError: expected 403 to equal 404\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1394:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 404\n"
                  },
                  "uuid": "ff0a6bb0-c7b2-467f-a5be-ec60e697119d",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_11->To verify error is thrown if the document status is not DONE",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_11->To verify error is thrown if the document status is not DONE",
                  "timedOut": false,
                  "duration": 1921,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "//Issue created\nlet SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/${FILE_ID}/result`\nURL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(resp.body, validation.INVALID_ENDPOINT);\n  //assert message\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1418:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "6237f2fd-0bb3-4bec-b535-9e7388d427e6",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_12->To verify error is thrown if Job , Document Analysis is not done",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_12->To verify error is thrown if Job , Document Analysis is not done",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "//Created Issue\nassert.fail();",
                  "err": {
                    "message": "AssertionError: assert.fail()",
                    "estack": "AssertionError: assert.fail()\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1430:14)\n    at processImmediate (internal/timers.js:464:21)",
                    "diff": null
                  },
                  "uuid": "3d4d0705-bc8d-4f27-b9bd-688d07149147",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_13->To verify error is thrown if job_id removed in URL",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_13->To verify error is thrown if job_id removed in URL",
                  "timedOut": false,
                  "duration": 832,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63ef52ac9a47c20019939b46\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"Invalid API endpoint\"\n  }\n]",
                  "code": "let SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/file/${FILE_ID}/result`\nURL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(404));\n  assert.equal(resp.body, validation.INVALID_ENDPOINT);\n  //assert message\n  let bodyObj = (resp.body);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {},
                  "uuid": "4f13f9c6-b38f-42fc-bf17-40d5a036636e",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GDR_14->To verify error is thrown if file_id is removed in URL",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document Result TC_GDR_14->To verify error is thrown if file_id is removed in URL",
                  "timedOut": false,
                  "duration": 1863,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT\",\n    \"value\": \"job_id:63bfe13e3c141d0032bf46c4\"\n  },\n  {\n    \"title\": \"OUTPUT\",\n    \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n  }\n]",
                  "code": "JOB_ID = \"63bfe13e3c141d0032bf46c4\"\nlet SUB_URL_GET_JOB_DOCUMENT_RESULT = `/api/job/${JOB_ID}/file/result`\nURL_GET_JOB_DOCUMENT_RESULT = configData.BASE_URL + SUB_URL_GET_JOB_DOCUMENT_RESULT\nresp = await genericMethods.getAPICall(URL_GET_JOB_DOCUMENT_RESULT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID);\ngenericMethods.addContext(this, 'OUTPUT', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(404));\n  assert.equal(resp.body, validation.INVALID_ENDPOINT);\n  //assert message\n  let bodyObj = (resp.body);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 404",
                    "estack": "AssertionError: expected 403 to equal 404\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1469:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 404\n"
                  },
                  "uuid": "a52d1945-4b43-43fd-a85d-fe9a048339ca",
                  "parentUUID": "de95a9da-f0ff-46a4-ba03-e036eec79ed7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42409372-b3df-4a69-980e-75e062a4f90b",
                "f6d3e1b0-baa0-41de-9a09-c3bdce02e80f",
                "6dd4c91c-a580-46f8-94a7-3bd1dd7173a6",
                "4f13f9c6-b38f-42fc-bf17-40d5a036636e"
              ],
              "failures": [
                "148fbcb1-b2eb-4b58-bd3d-b03387a5ce4b",
                "385eb405-cd6e-491d-b901-6f3bc24d4341",
                "7c77d094-bfae-4a81-9d9a-3339c1d48a91",
                "2ae57c21-f8ae-416a-8b08-47615f0eabc4",
                "678c5070-159a-4b27-a172-22583f1619d3",
                "526c1de1-372a-43ea-b491-dcf048284c34",
                "ff0a6bb0-c7b2-467f-a5be-ec60e697119d",
                "6237f2fd-0bb3-4bec-b535-9e7388d427e6",
                "3d4d0705-bc8d-4f27-b9bd-688d07149147",
                "a52d1945-4b43-43fd-a85d-fe9a048339ca"
              ],
              "pending": [],
              "skipped": [],
              "duration": 16147,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
              "title": "Get Document",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_GD_01->To verify user is able to get document using valid job_id and file_id",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_01->To verify user is able to get document using valid job_id and file_id",
                  "timedOut": false,
                  "duration": 1966,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\n URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT\n resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n //genericMethods.addContext(this,'OUTPUT',resp);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n }\n else {\n   assert.fail(\"Response is undefined\", resp);\n }",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1495:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "c598236f-cad0-4f26-a1cb-2d50bede8524",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_02->To verify error is thrown if invalid job_id and file_id is provided",
                  "timedOut": false,
                  "duration": 1861,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT\nresp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n//Issue created\nassert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST)",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1513:14)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "d73bcd16-bdd0-46dd-bbc4-506c9748c0f3",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_03->To verify error is thrown if file_id of different job is provided in the query parameter",
                  "timedOut": false,
                  "duration": 1898,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\n URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT\n resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n //Isuue created\n assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST)",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1528:14)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "e8b5d9c7-042a-449e-8b38-2229753fd289",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_04->To verify error is thrown if job_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_04->To verify error is thrown if job_id is invalid",
                  "timedOut": false,
                  "duration": 1915,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${configData.INVALID_JOB_ID}/file/${FILE_ID}`\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT\nresp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nassert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST)\n//Isuue created",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1541:14)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "df3f3449-d73e-4437-afb4-a962c0cd587e",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_05->To verify error is thrown if file_id is invalid",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_05->To verify error is thrown if file_id is invalid",
                  "timedOut": false,
                  "duration": 1858,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\nresp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nassert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST)\n//Isuue created",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1555:14)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "92d3c4ee-1e7c-4e05-a89f-149cbb22c3b7",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_06->To verify error is thrown if job_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_06->To verify error is thrown if job_id is empty",
                  "timedOut": false,
                  "duration": 2046,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\nresp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nassert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\nassert.equal(resp.body, validation.INVALID_ENDPOINT);",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 404",
                    "estack": "AssertionError: expected 403 to equal 404\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1569:14)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 404\n"
                  },
                  "uuid": "bd461009-f583-4b0a-9199-adf423ee448c",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_07->To verify error is thrown if file_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_07->To verify error is thrown if file_id is empty",
                  "timedOut": false,
                  "duration": 1847,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\nresp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\nassert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\nassert.equal(resp.body, validation.INVALID_ENDPOINT);",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 404",
                    "estack": "AssertionError: expected 403 to equal 404\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1583:14)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 404\n"
                  },
                  "uuid": "cb790a46-ebc9-429d-b333-5b014c328a2e",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_08->To verify error is thrown if job_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_08->To verify error is thrown if job_id is empty space",
                  "timedOut": false,
                  "duration": 1955,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\nresp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n//isuue created\nassert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 400",
                    "estack": "AssertionError: expected 403 to equal 400\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1598:14)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 400\n"
                  },
                  "uuid": "154059e6-7eab-4fbc-a318-b5067a52b814",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_09->To verify error is thrown if file_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_09->To verify error is thrown if file_id is empty space",
                  "timedOut": false,
                  "duration": 1874,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\n URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\n resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.NOT_FOUND);\n   assert.equal(resp.body, validation.INVALID_ENDPOINT);\n }\n else {\n   assert.fail(resp, \"is undefined\");\n }",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 404",
                    "estack": "AssertionError: expected 403 to equal 404\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1612:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 404\n"
                  },
                  "uuid": "238e1d51-b3f3-4b28-bf58-b76d9cdd4ebb",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_10->To verify error is thrown if expired access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_10->To verify error is thrown if expired access token is passed",
                  "timedOut": false,
                  "duration": 1954,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\n URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\n resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer ${configData.EXPIRED_ACCESS_TOKEN}`\n   }\n })\n if (resp !== undefined) {\n   let bodyObj = JSON.parse(resp.body);\n   genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n   assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n   assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {},
                  "uuid": "20f7d40f-1f79-42e0-8c86-625cae175ae0",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_10->To verify error is thrown if invalid access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_10->To verify error is thrown if invalid access token is passed",
                  "timedOut": false,
                  "duration": 1910,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`\n URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\n resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n   headers:\n   {\n     \"tenant\": configData.TENANT,\n     \"Authorization\": `Bearer invalid_Access_token`\n   }\n })\n if (resp !== undefined) {\n   let bodyObj = JSON.parse(resp.body);\n   genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n   assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n   assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n }\n else {\n   assert.fail(resp, \"is undefined\");\n }",
                  "err": {},
                  "uuid": "56a13f04-5ef8-4019-a225-2987ebbc67d5",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_11->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_11->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 1851,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`;\n  URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\n  resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n    headers:\n    {\n      \"tenant\": \"DEV_IDP\",\n      \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n    }\n  })\n  if (resp !== undefined) {\n    let bodyObj = JSON.parse(resp.body);\n    genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n    assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n    assert.equal(bodyObj.message, validation.INVALID_TENANT);\n  }\n  else {\n    assert.fail(resp, \"is undefined\");\n  }",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'invalid tenant.'",
                    "estack": "AssertionError: expected undefined to equal 'invalid tenant.'\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1675:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "0b8de0b4-5d91-42dd-9263-d0097f2c75ed",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_12->To verify error is thrown if the tenant is null in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_12->To verify error is thrown if the tenant is null in the request header",
                  "timedOut": false,
                  "duration": 840,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`;\n URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\n resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n   headers:\n   {\n     \"tenant\": null,\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n if (resp !== undefined) {\n   let bodyObj = JSON.parse(resp.body);\n   genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n   assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n   assert.equal(bodyObj.result.reason, validation.TENANT_MISSING);\n }\n else {\n   assert.fail(resp, \"is undefined\");\n }",
                  "err": {},
                  "uuid": "be383468-32f8-4c04-948a-29b236ed3033",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GD_13->To verify error is thrown if  access token is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Document TC_GD_13->To verify error is thrown if  access token is null",
                  "timedOut": false,
                  "duration": 768,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT\",\n  \"value\": \"job_id:63bfe13e3c141d0032bf46c4  file_id:63ef52bd9a47c20019939b49\"\n}",
                  "code": "let SUB_URL_GET_DOCUMENT = `/api/job/${JOB_ID}/file/${FILE_ID}`;\n      URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_DOCUMENT;\n      resp = await genericMethods.getAPICall(URL_GET_DOCUMENT, {\n headers:\n {\n   \"tenant\": configData.TENANT,\n   \"Authorization\": null\n }\n      })\n      if (resp !== undefined) {\n let bodyObj = JSON.parse(resp.body);\n genericMethods.addContext(this, 'INPUT', \"job_id:\" + JOB_ID + \"  file_id:\" + FILE_ID);\n assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n assert.equal(bodyObj.result.reason, validation.TOKEN_UNAVAILABLE);\n      }\n      else {\n assert.fail(resp, \"is undefined\");\n      }",
                  "err": {},
                  "uuid": "79e2d47e-0647-4ab0-b644-2cf2d47491a5",
                  "parentUUID": "b175c5ee-4c38-4c7c-a5de-1c18c7314de7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20f7d40f-1f79-42e0-8c86-625cae175ae0",
                "56a13f04-5ef8-4019-a225-2987ebbc67d5",
                "be383468-32f8-4c04-948a-29b236ed3033",
                "79e2d47e-0647-4ab0-b644-2cf2d47491a5"
              ],
              "failures": [
                "c598236f-cad0-4f26-a1cb-2d50bede8524",
                "d73bcd16-bdd0-46dd-bbc4-506c9748c0f3",
                "e8b5d9c7-042a-449e-8b38-2229753fd289",
                "df3f3449-d73e-4437-afb4-a962c0cd587e",
                "92d3c4ee-1e7c-4e05-a89f-149cbb22c3b7",
                "bd461009-f583-4b0a-9199-adf423ee448c",
                "cb790a46-ebc9-429d-b333-5b014c328a2e",
                "154059e6-7eab-4fbc-a318-b5067a52b814",
                "238e1d51-b3f3-4b28-bf58-b76d9cdd4ebb",
                "0b8de0b4-5d91-42dd-9263-d0097f2c75ed"
              ],
              "pending": [],
              "skipped": [],
              "duration": 24543,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            },
            {
              "uuid": "0a53d3f0-9084-421d-8e1c-96679e74102c",
              "title": "Get Jobs",
              "fullFile": "D:\\Testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_GJ_01->To verify that all the jobs with respect to the tenant given in the header are fetched",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_01->To verify that all the jobs with respect to the tenant given in the header are fetched",
                  "timedOut": false,
                  "duration": 2653,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n}",
                  "code": "let SUB_URL_GET_JOBS = `/api/jobs/list`;\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOBS;\nresp = await genericMethods.postAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\ngetJobsMongoData = await genericMethods.mongoDBDataFetch(\"jobs\", { \"tenant_id\": `${configData.NEUTRINOS_TENANT_ID}` }, '');\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.length, getJobsMongoData.length);\n}\nelse {\n  assert.fail(resp, \"is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 403 to equal 200",
                    "estack": "AssertionError: expected 403 to equal 200\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1740:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- 403\n+ 200\n"
                  },
                  "uuid": "2c8a38ad-91b5-4dad-b025-b679164559e1",
                  "parentUUID": "0a53d3f0-9084-421d-8e1c-96679e74102c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_02->To verify error is thrown if expired access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_02->To verify error is thrown if expired access token is passed",
                  "timedOut": false,
                  "duration": 776,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token unavailable\\\"}}\"\n}",
                  "code": "let SUB_URL_GET_JOBS = `/api/jobs/list`;\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOBS;\nresp = await genericMethods.postAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `${configData.EXPIRED_ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 'Token unavailable' to equal 'Token expired or invalid'",
                    "estack": "AssertionError: expected 'Token unavailable' to equal 'Token expired or invalid'\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1762:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- Token unavailable\n+ Token expired or invalid\n"
                  },
                  "uuid": "514d848a-584e-4f49-b9c6-54718dd1bce6",
                  "parentUUID": "0a53d3f0-9084-421d-8e1c-96679e74102c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_03->To verify error is thrown if invalid access token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_03->To verify error is thrown if invalid access token is passed",
                  "timedOut": false,
                  "duration": 809,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token unavailable\\\"}}\"\n}",
                  "code": "let SUB_URL_GET_JOBS = `/api/jobs/list`;\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOBS;\nresp = await genericMethods.postAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `invalid_access_token`\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected 'Token unavailable' to equal 'Token expired or invalid'",
                    "estack": "AssertionError: expected 'Token unavailable' to equal 'Token expired or invalid'\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1783:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": "- Token unavailable\n+ Token expired or invalid\n"
                  },
                  "uuid": "cbe684b6-2dc9-4212-b468-b7909f393201",
                  "parentUUID": "0a53d3f0-9084-421d-8e1c-96679e74102c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_04->To verify error is thrown if the tenant is not neutrinos in the request header",
                  "timedOut": false,
                  "duration": 1214,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n}",
                  "code": "let SUB_URL_GET_JOBS = `/api/jobs/list`;\n URL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOBS;\n resp = await genericMethods.postAPICall(URL_GET_DOCUMENT, {\n   headers:\n   {\n     \"tenant\": \"DEV_IDP\",\n     \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, \"output\", resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n   let bodyObj = JSON.parse(resp.body);\n   assert.equal(bodyObj.message, validation.INVALID_TENANT);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'invalid tenant.'",
                    "estack": "AssertionError: expected undefined to equal 'invalid tenant.'\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1803:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "acd334e6-28ba-4b16-88c2-85d91a9c7d53",
                  "parentUUID": "0a53d3f0-9084-421d-8e1c-96679e74102c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_05->To verify error is thrown if the tenant is not neutrinos is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_05->To verify error is thrown if the tenant is not neutrinos is null",
                  "timedOut": false,
                  "duration": 777,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"canAccess\\\":false,\\\"reason\\\":\\\"missing tenant header\\\"}}\"\n}",
                  "code": "let SUB_URL_GET_JOBS = `/api/jobs/list`;\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOBS;\nresp = await genericMethods.postAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": null,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.message, validation.TENANT_MISSING);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {
                    "message": "AssertionError: expected undefined to equal 'missing tenant header'",
                    "estack": "AssertionError: expected undefined to equal 'missing tenant header'\n    at Context.<anonymous> (TestCases\\IDP\\testIDP\\idpTesting.js:1823:16)\n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                    "diff": null
                  },
                  "uuid": "c8423b94-a88b-49c6-b92b-b87871995466",
                  "parentUUID": "0a53d3f0-9084-421d-8e1c-96679e74102c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_GJ_06->To verify error is thrown if access token is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Jobs TC_GJ_06->To verify error is thrown if access token is null",
                  "timedOut": false,
                  "duration": 770,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"output\",\n  \"value\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token unavailable\\\"}}\"\n}",
                  "code": "let SUB_URL_GET_JOBS = `/api/jobs/list`;\nURL_GET_DOCUMENT = configData.BASE_URL + SUB_URL_GET_JOBS;\nresp = await genericMethods.postAPICall(URL_GET_DOCUMENT, {\n  headers:\n  {\n    \"tenant\": configData.TENANT,\n    \"Authorization\": null\n  }\n})\ngenericMethods.addContext(this, \"output\", resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.reason, validation.TOKEN_UNAVAILABLE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "4af327aa-9dcf-400a-875d-2fe3f3e4b76c",
                  "parentUUID": "0a53d3f0-9084-421d-8e1c-96679e74102c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4af327aa-9dcf-400a-875d-2fe3f3e4b76c"
              ],
              "failures": [
                "2c8a38ad-91b5-4dad-b025-b679164559e1",
                "514d848a-584e-4f49-b9c6-54718dd1bce6",
                "cbe684b6-2dc9-4212-b468-b7909f393201",
                "acd334e6-28ba-4b16-88c2-85d91a9c7d53",
                "c8423b94-a88b-49c6-b92b-b87871995466"
              ],
              "pending": [],
              "skipped": [],
              "duration": 6999,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "IDPTestingReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "timestamp": true,
        "reportDir": "Reporting/IDPTestingReport",
        "reportFilename": "IDPTestingReport",
        "reportTitle": "IDPTestingTesting",
        "reportPageTitle": "ReportTesting",
        "json": "true"
      },
      "version": "4.1.0"
    }
  }
}