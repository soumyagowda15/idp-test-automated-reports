{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-03-15T10:28:52.765Z",
    "end": "2023-03-15T10:29:18.444Z",
    "duration": 25679,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fc6cb2d6-b897-4a37-a4c5-7367630c5460",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "17f3134b-dadf-4fa6-b84e-df546d111c42",
          "title": "Neutrinos Intelligent Document Processing APIs",
          "fullFile": "D:\\Testing\\Automation_testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "fullTitle": "Neutrinos Intelligent Document Processing APIs \"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "timedOut": false,
              "duration": 531,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                                .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                                .setValue(\"grant_type\", configData.GRANT_TYPE)\n                                .encode();;\n//Send request to fetch access Token\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: { \n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nACCESS_TOKEN = bodyObj.access_token;",
              "err": {},
              "uuid": "87a96c19-5e79-4c9a-845f-ccac4824b4ac",
              "parentUUID": "17f3134b-dadf-4fa6-b84e-df546d111c42",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
              "title": "Create Job",
              "fullFile": "D:\\Testing\\Automation_testing\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_CJ_01->To verify Job is created for a client if the proper tenant and access token is provided in the header for '/JOB' POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_01->To verify Job is created for a client if the proper tenant and access token is provided in the header for '/JOB' POST API",
                  "timedOut": false,
                  "duration": 3067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"[{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"tenant_id\\\":\\\"6225cde095f5119c54aa1234\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\",\\\"job_name\\\":1678876134702,\\\"created_at\\\":\\\"2023-03-15T10:28:54.702Z\\\",\\\"status\\\":\\\"CREATED\\\",\\\"client_id\\\":\\\"x4PNAVz-EzNX48LFqnOsP\\\",\\\"_id\\\":\\\"64119de62228700019b5905d\\\"}]\"\n  },\n  {\n    \"title\": \"MongoDb-Jobs\",\n    \"value\": [\n      {\n        \"_id\": \"64119de62228700019b5905d\",\n        \"job_type\": \"doc_analysis\",\n        \"tenant_id\": \"6225cde095f5119c54aa1234\",\n        \"created_by\": \"{{TENANT_SYSTEM}}\",\n        \"job_name\": 1678876134702,\n        \"created_at\": \"2023-03-15T10:28:54.702Z\",\n        \"status\": \"CREATED\",\n        \"callback_url\": null,\n        \"client_id\": \"x4PNAVz-EzNX48LFqnOsP\"\n      }\n    ]\n  }\n]",
                  "code": "//testData for createJob\n      let body = JSON.stringify(createJobTestData);\n      //send Request\n      resp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n body: body,\n headers: {\n   \"Content-Type\": \"application/json\",\n   \"tenant\": \"neutrinos\",\n   \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n }\n      })\n      genericMethods.addContext(this, 'INPUT JSON', body);\n      genericMethods.addContext(this, 'OUTPUT JSON', resp.body);\n      // Fetch data for jobs MongoDB table\n      var bodyObj = JSON.parse(resp.body);\n      jobsMongoData = await genericMethods.mongoDBDataFetch(\"jobs\", { \"job_name\": bodyObj[0].job_name });\n      genericMethods.addContext(this, 'MongoDb-Jobs', jobsMongoData);\n      //assertion for response\n      if (resp !== undefined) {\n assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(200));\n JOB_ID = bodyObj[0]._id;\n assert.equal(bodyObj[0].job_type, \"doc_analysis\");\n assert.exists(bodyObj[0].tenant_id);\n assert.exists(bodyObj[0].job_name);\n assert.exists(bodyObj[0].status);\n assert.equal(bodyObj[0].client_id, process.env.CLIENT_ID);\n assert.exists(bodyObj[0]._id);\n      }\n      else {\n assert.fail(resp, \"is undefined\")\n      }",
                  "err": {},
                  "uuid": "757375a9-a033-413b-97b9-8f54ec8a13fe",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_02->To verify job is not created if expired access Token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_02->To verify job is not created if expired access Token is passed",
                  "timedOut": false,
                  "duration": 1914,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"idp.neutrinos.co\",\n      \"hostname\": \"idp.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://idp.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"idp.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"idp.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://idp.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer XZID-4oErmMFGGjKWK0UgAHVXDUfY5KzQnUwfagzWO-\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 60\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Wed, 15 Mar 2023 10:28:57 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"94\",\n        \"connection\": \"close\",\n        \"content-security-policy\": \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\",\n        \"x-dns-prefetch-control\": \"off\",\n        \"expect-ct\": \"max-age=0\",\n        \"x-frame-options\": \"SAMEORIGIN\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\",\n        \"x-download-options\": \"noopen\",\n        \"x-content-type-options\": \"nosniff\",\n        \"x-permitted-cross-domain-policies\": \"none\",\n        \"referrer-policy\": \"no-referrer\",\n        \"x-xss-protection\": \"0\",\n        \"vary\": \"Origin\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"5e-FpxP0i0b+BDpEOlwGcg5x3szWSo\\\"\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n    }\n  }\n]",
                  "code": "let body=JSON.stringify(createJobTestData);\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${process.env.EXPIRED_ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.active, false);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "cea77275-2e63-46f0-bb1b-6aba0d20443f",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_03->To verify that job is not created when client is not registered to DEV IDP",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_03->To verify that job is not created when client is not registered to DEV IDP",
                  "timedOut": false,
                  "duration": 2605,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": {\n      \"created_by\": \" \"\n    }\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"idp.neutrinos.co\",\n      \"hostname\": \"idp.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://idp.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"idp.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"idp.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://idp.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer AIvfDqkknswyfmeNMzV-QzYjlLdOxXsxfGUlWQF5r7Y\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 60\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Wed, 15 Mar 2023 10:28:59 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"47\",\n        \"connection\": \"close\",\n        \"content-security-policy\": \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\",\n        \"x-dns-prefetch-control\": \"off\",\n        \"expect-ct\": \"max-age=0\",\n        \"x-frame-options\": \"SAMEORIGIN\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\",\n        \"x-download-options\": \"noopen\",\n        \"x-content-type-options\": \"nosniff\",\n        \"x-permitted-cross-domain-policies\": \"none\",\n        \"referrer-policy\": \"no-referrer\",\n        \"x-xss-protection\": \"0\",\n        \"vary\": \"Origin\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"2f-pcUQ7NLGU5OS0ooX4qYkkJu3Kw8\\\"\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"message\\\":\\\"unregistered client.\\\"}\"\n    }\n  }\n]",
                  "code": "//Generate access token using unregistered client_id and client_secret\n let body = await accessTokenData.setValue(\"client_id\", process.env.UNREGISTERED_CLIENT_ID)\n                                 .setValue(\"client_secret\", process.env.UNREGISTERED_CLIENT_SECRET)\n                                 .setValue(\"grant_type\", configData.GRANT_TYPE)\n                                 .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/x-www-form-urlencoded\"\n   }\n })\n UNREGISTERED_CLIENT_ACCESS_TOKEN = JSON.parse(resp.body).access_token;\n resp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n   body: JSON.stringify(createJobTestData),\n   headers: {\n     \"Content-Type\": \"application/json\",\n     \"tenant\": \"neutrinos\",\n     \"Authorization\": `Bearer ${UNREGISTERED_CLIENT_ACCESS_TOKEN}`\n   }\n })\n genericMethods.addContext(this, 'INPUT JSON', createJobTestData);\n genericMethods.addContext(this, 'OUTPUT JSON', resp);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n   let bodyObj = JSON.parse(resp.body);\n   assert.equal(bodyObj.message, dataValidation.UNREGISTERED_CLIENT);\n }\n else {\n   assert.fail(resp, \"Response is undefined\");\n }",
                  "err": {},
                  "uuid": "fc054cab-51d9-441f-8d82-8d29eb4498de",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_04->To verify error is thrown if tenant is not neutrinos",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_04->To verify error is thrown if tenant is not neutrinos",
                  "timedOut": false,
                  "duration": 2068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"{\\\"status\\\":403,\\\"message\\\":\\\"invalid tenant.\\\"}\"\n  }\n]",
                  "code": "let body=JSON.stringify(createJobTestData);\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"DEV_IDP\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp.body);\nif (resp !== undefined) {\n  var bodyObj = JSON.parse(resp.body);\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  assert.equal(bodyObj.message, dataValidation.INVALID_TENANT);\n}\nelse {\n  assert.fail(resp, \"is undefined\")\n}",
                  "err": {},
                  "uuid": "6da2f58f-66d4-4c80-a916-e70705154f7e",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_05->To verify error is thrown if payload is not JSON",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_05->To verify error is thrown if payload is not JSON",
                  "timedOut": false,
                  "duration": 2294,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"Invalid Payload\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": \"{\\\"message\\\":\\\"Bad Request. Content type should be application/json.\\\",\\\"status\\\":400}\"\n  }\n]",
                  "code": "let body = \"Invalid Payload\"\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"text/plain\",\n    \"tenant\": configData.TENANT,\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n}",
                  "err": {},
                  "uuid": "1edc6124-99aa-4b68-99ef-0639a3449448",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_06->To verify job is not created if invalid access Token is passed",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_06->To verify job is not created if invalid access Token is passed",
                  "timedOut": false,
                  "duration": 1856,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"INPUT JSON\",\n    \"value\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\"\n  },\n  {\n    \"title\": \"OUTPUT JSON\",\n    \"value\": {\n      \"name\": \"HTTPError\",\n      \"host\": \"idp.neutrinos.co\",\n      \"hostname\": \"idp.neutrinos.co\",\n      \"method\": \"POST\",\n      \"path\": \"/api/job\",\n      \"protocol\": \"https:\",\n      \"url\": \"https://idp.neutrinos.co/api/job\",\n      \"gotOptions\": {\n        \"path\": \"/api/job\",\n        \"protocol\": \"https:\",\n        \"slashes\": true,\n        \"auth\": null,\n        \"host\": \"idp.neutrinos.co\",\n        \"port\": null,\n        \"hostname\": \"idp.neutrinos.co\",\n        \"hash\": null,\n        \"search\": null,\n        \"query\": null,\n        \"pathname\": \"/api/job\",\n        \"href\": \"https://idp.neutrinos.co/api/job\",\n        \"retry\": {\n          \"methods\": {},\n          \"statusCodes\": {},\n          \"errorCodes\": {}\n        },\n        \"headers\": {\n          \"user-agent\": \"got/9.6.0 (https://github.com/sindresorhus/got)\",\n          \"content-type\": \"application/json\",\n          \"tenant\": \"neutrinos\",\n          \"authorization\": \"Bearer INVALID_ACCESS_TOKEN\",\n          \"accept-encoding\": \"gzip, deflate\",\n          \"content-length\": 60\n        },\n        \"hooks\": {\n          \"beforeRequest\": [],\n          \"beforeRedirect\": [],\n          \"beforeRetry\": [],\n          \"afterResponse\": [],\n          \"beforeError\": [],\n          \"init\": []\n        },\n        \"decompress\": true,\n        \"throwHttpErrors\": true,\n        \"followRedirect\": true,\n        \"stream\": false,\n        \"form\": false,\n        \"json\": false,\n        \"cache\": false,\n        \"useElectronNet\": false,\n        \"body\": \"{\\\"job_type\\\":\\\"doc_analysis\\\",\\\"created_by\\\":\\\"{{TENANT_SYSTEM}}\\\"}\",\n        \"method\": \"POST\"\n      },\n      \"statusCode\": 403,\n      \"statusMessage\": \"Forbidden\",\n      \"headers\": {\n        \"date\": \"Wed, 15 Mar 2023 10:29:06 GMT\",\n        \"content-type\": \"application/json; charset=utf-8\",\n        \"content-length\": \"94\",\n        \"connection\": \"close\",\n        \"content-security-policy\": \"default-src 'self';base-uri 'self';block-all-mixed-content;font-src 'self' https: data:;frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\",\n        \"x-dns-prefetch-control\": \"off\",\n        \"expect-ct\": \"max-age=0\",\n        \"x-frame-options\": \"SAMEORIGIN\",\n        \"strict-transport-security\": \"max-age=15724800; includeSubDomains\",\n        \"x-download-options\": \"noopen\",\n        \"x-content-type-options\": \"nosniff\",\n        \"x-permitted-cross-domain-policies\": \"none\",\n        \"referrer-policy\": \"no-referrer\",\n        \"x-xss-protection\": \"0\",\n        \"vary\": \"Origin\",\n        \"access-control-allow-credentials\": \"true\",\n        \"etag\": \"W/\\\"5e-FpxP0i0b+BDpEOlwGcg5x3szWSo\\\"\"\n      },\n      \"body\": \"{\\\"status\\\":403,\\\"result\\\":{\\\"active\\\":false,\\\"canAccess\\\":false,\\\"reason\\\":\\\"Token expired or invalid\\\"}}\"\n    }\n  }\n]",
                  "code": "let body=JSON.stringify(createJobTestData);\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer INVALID_ACCESS_TOKEN`\n  }\n})\ngenericMethods.addContext(this, 'INPUT JSON', body);\ngenericMethods.addContext(this, 'OUTPUT JSON', resp);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.FORBIDDEN);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(403));\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(bodyObj.result.active, false);\n  assert.equal(bodyObj.result.reason, dataValidation.TOKEN_EXPIRED);\n}\nelse {\n  assert.fail(resp, \"Response is undefined\");\n}",
                  "err": {},
                  "uuid": "099574f6-f5ae-4c9c-a5c0-f8f09ed4c88e",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_07->To verify error is thrown if job_type is removed in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_07->To verify error is thrown if job_type is removed in the json body",
                  "timedOut": false,
                  "duration": 4335,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"created_by\": \" \"\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"message\\\":\\\"Unknown Job Type, could not create job.\\\",\\\"status\\\":400}\"\n  }\n]",
                  "code": "let body = await createJobData.removeKey(\"job_type\");\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.UNKNOWN_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "a1e05873-d7bd-453b-805a-a8ed1f961e5f",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_08->To verify error is thrown if created_by is removed in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_08->To verify error is thrown if created_by is removed in the json body",
                  "timedOut": false,
                  "duration": 2301,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"created_by\": \" \"\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"message\\\":\\\"Unknown Job Type, could not create job.\\\",\\\"status\\\":400}\"\n  }\n]",
                  "code": "let body = createJobData.removeKey(\"created_by\");\n\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body:  JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.INVALID_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "5251a82b-2e90-470f-9e72-201a37dd7b7b",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_09->To verify error is thrown if created_by is empty value in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_09->To verify error is thrown if created_by is empty value in the json body",
                  "timedOut": false,
                  "duration": 2385,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"data\": {\n        \"created_by\": \" \"\n      }\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"message\\\":\\\"Unknown Job Type, could not create job.\\\",\\\"status\\\":400}\"\n  }\n]",
                  "code": "let body = createJobData.setValue(\"created_by\", \"\");\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.INVALID_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "7f679a1d-cac2-405b-994a-4d284f415a20",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_CJ_10->To verify error is thrown if created_by is empty space value in the json body",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Create Job TC_CJ_10->To verify error is thrown if created_by is empty space value in the json body",
                  "timedOut": false,
                  "duration": 2299,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "[\n  {\n    \"title\": \"Input\",\n    \"value\": {\n      \"data\": {\n        \"created_by\": \" \"\n      }\n    }\n  },\n  {\n    \"title\": \"Output\",\n    \"value\": \"{\\\"message\\\":\\\"Unknown Job Type, could not create job.\\\",\\\"status\\\":400}\"\n  }\n]",
                  "code": "let body = createJobData.setValue(\"created_by\", \" \");\nresp = await genericMethods.postApiCall(URL_CREATE_JOB, {\n  body: JSON.stringify(body),\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"tenant\": \"neutrinos\",\n    \"Authorization\": `Bearer ${ACCESS_TOKEN}`\n  }\n})\ngenericMethods.addContext(this, \"Input\", body);\ngenericMethods.addContext(this, \"Output\", resp.body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(bodyObj.message, dataValidation.UNKNOWN_JOB_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "749c0bed-783d-47da-970e-9de696f71115",
                  "parentUUID": "ab3be07f-4681-4ad0-a158-25bbf279fa50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "757375a9-a033-413b-97b9-8f54ec8a13fe",
                "cea77275-2e63-46f0-bb1b-6aba0d20443f",
                "fc054cab-51d9-441f-8d82-8d29eb4498de",
                "6da2f58f-66d4-4c80-a916-e70705154f7e",
                "1edc6124-99aa-4b68-99ef-0639a3449448",
                "099574f6-f5ae-4c9c-a5c0-f8f09ed4c88e",
                "a1e05873-d7bd-453b-805a-a8ed1f961e5f",
                "5251a82b-2e90-470f-9e72-201a37dd7b7b",
                "7f679a1d-cac2-405b-994a-4d284f415a20",
                "749c0bed-783d-47da-970e-9de696f71115"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25124,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "IDPTestingReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "timestamp": true,
        "reportDir": "Reporting/IDPTestingReport",
        "reportFilename": "IDPTestingReport",
        "reportTitle": "IDPTesting"
      },
      "version": "4.1.0"
    }
  }
}