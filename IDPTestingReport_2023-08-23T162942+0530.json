{
  "stats": {
    "suites": 2,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-23T10:59:35.151Z",
    "end": "2023-08-23T10:59:42.428Z",
    "duration": 7277,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c3800d15-ca0e-4f2a-adfb-172274ee916c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4b1d3d18-2eeb-42e7-8d00-7412045dad02",
          "title": "Neutrinos Intelligent Document Processing APIs",
          "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "fullTitle": "Neutrinos Intelligent Document Processing APIs \"before all\" hook in \"Neutrinos Intelligent Document Processing APIs\"",
              "timedOut": false,
              "duration": 695,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                                .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                                .setValue(\"grant_type\", configData.GRANT_TYPE)\n                                .encode();;\n//Send request to fetch access Token\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: { \n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\nlet bodyObj = JSON.parse(resp.body);\nACCESS_TOKEN = bodyObj.access_token;",
              "err": {},
              "uuid": "4ab438f1-7a19-4fac-af53-ef76d6d5e404",
              "parentUUID": "4b1d3d18-2eeb-42e7-8d00-7412045dad02",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
              "title": "Get Access Token",
              "fullFile": "D:\\IDP Automation Framework\\idp-automated-tests\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "file": "\\TestCases\\IDP\\testIDP\\idpTesting.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "TC_AC_01->To verify that access Token is genearted when proper client ID (client should be registered to DEV IDP), client Secret, and grant type is provided in the Input for the Get Access Token POST API ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_01->To verify that access Token is genearted when proper client ID (client should be registered to DEV IDP), client Secret, and grant type is provided in the Input for the Get Access Token POST API ",
                  "timedOut": false,
                  "duration": 603,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=client_credentials\"\n}",
                  "code": "//update testData &encode testData\nconst body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                                  .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                                  .setValue(\"grant_type\", configData.GRANT_TYPE)\n                                  .encode();\n//Send request to fetch access Token\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n// Assertion for response\nif (resp !== undefined) {\n  let bodyObj = JSON.parse(resp.body);\n  assert.equal(resp.statusCode, HTTPStatusCodes.OK);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(200));\n  ACCESS_TOKEN = bodyObj.access_token;\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "cea43863-9c6d-4261-948f-4ab7e25537e0",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_02->To Verify Error is thrown if the Content-Type in the header is not application/x-www-form-urlencoded ",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_02->To Verify Error is thrown if the Content-Type in the header is not application/x-www-form-urlencoded ",
                  "timedOut": false,
                  "duration": 325,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                         .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                         .setValue(\"grant_type\", configData.GRANT_TYPE)\n                         .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/json\"\n   }\n })\n genericMethods.addContext(this, 'INPUT ', body);\n let bodyObj = JSON.parse(resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n   assert.equal(bodyObj.error_description, dataValidation.INVALID_CONTENT_TYPE);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {},
                  "uuid": "74d5e634-6320-4b2b-aaaf-8c0166fb5b09",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_03->To verify error is thrown if client_id and client_secret are not of same client",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_03->To verify error is thrown if client_id and client_secret are not of same client",
                  "timedOut": false,
                  "duration": 391,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=nyZwKpIODGYbayAv4QKTnWJInmTeI8CZiTSfGwU1DFFsBiYLM2Y8p6EmHYCk0sZ_4Pk-6Z9FOfiKPtaiWK81qA&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET1)\n                        .setValue(\"grant_type\", configData.GRANT_TYPE)\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "1126bd7f-a6d6-48d1-a0d3-70334a73ddf2",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_04->To verify that error is thrown if the grant_type in the Input body is not client_credentials",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_04->To verify that error is thrown if the grant_type in the Input body is not client_credentials",
                  "timedOut": false,
                  "duration": 358,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=grant\"\n}",
                  "code": "let body = await accessTokenData.setValue( \"client_id\", process.env.CLIENT_ID)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", \"grant\")\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n     \nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_GRANT_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "fad0dcde-1242-4579-8740-f818779ec04c",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_05->To verify error is thrown if for a client registered in IDP ,client secret is random text in the input body for Get Access Token POST API",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_05->To verify error is thrown if for a client registered in IDP ,client secret is random text in the input body for Get Access Token POST API",
                  "timedOut": false,
                  "duration": 605,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=clientSecret&grant_type=client_credentials\"\n}",
                  "code": "let body=await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                      .setValue(\"client_secret\", \"clientSecret\")\n                      .setValue(\"grant_type\", configData.GRANT_TYPE)\n                      .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "3539ca1d-e9b1-44bf-be95-ab841d672d04",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_06->To verify that error is thrown if the grant_type is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_06->To verify that error is thrown if the grant_type is null",
                  "timedOut": false,
                  "duration": 586,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=null\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                        .setValue( \"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", null)\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n     \nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_GRANT_TYPE);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "6e3d1490-53d8-454d-90c3-e0060974f646",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_07->To verify that error is thrown if the grant_type is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_07->To verify that error is thrown if the grant_type is empty",
                  "timedOut": false,
                  "duration": 539,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", \"\")\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.MISSING_GRANT_PARAMETER);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "8244395b-97e5-4049-9d44-14ca51737d83",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_08->To verify error is thrown if client_id is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_08->To verify error is thrown if client_id is null",
                  "timedOut": false,
                  "duration": 592,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=null&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", null)\n                        .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                        .setValue(\"grant_type\", configData.GRANT_TYPE)\n                        .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "f217dd76-61dd-4dfd-96b2-4f62a7c55778",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_09->To verify error is thrown if client_id is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_09->To verify error is thrown if client_id is empty",
                  "timedOut": false,
                  "duration": 507,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", \"\")\n                     .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                     .setValue(\"grant_type\", configData.GRANT_TYPE)\n                     .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.BAD_REQUEST);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(400));\n  assert.equal(bodyObj.error_description, dataValidation.INVALID_CLIENT);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "3440df2d-cdcd-49fb-9320-b3ac7228df8b",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_10->To verify error is thrown if client_id is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_10->To verify error is thrown if client_id is empty space",
                  "timedOut": false,
                  "duration": 369,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=%20&client_secret=n-69mmPydqxGRXjxmlLwi_wRIYHHY-2WRY2wFUmLKcQUjy19KsJ1KN35akFUl_d8uyXEeb6MmJohNEmgEwf3HQ&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", \" \")\n                     .setValue(\"client_secret\", process.env.CLIENT_SECRET)\n                     .setValue(\"grant_type\", configData.GRANT_TYPE)\n                     .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/x-www-form-urlencoded\"\n   }\n })\n genericMethods.addContext(this, 'INPUT ', body);\n \n let bodyObj = JSON.parse(resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n   assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {},
                  "uuid": "206b5c8a-cdbf-43ae-aaa4-09578e98c5b7",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_11->To verify error is thrown if client_secret is null",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_11->To verify error is thrown if client_secret is null",
                  "timedOut": false,
                  "duration": 567,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=null&grant_type=client_credentials\"\n}",
                  "code": "let body =  await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                      .setValue(\"client_secret\", null)\n                      .setValue(\"grant_type\", configData.GRANT_TYPE)\n                      .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "7845ecd1-2147-4bcd-80b9-857c2de43fb6",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_12->To verify error is thrown if client_secret is empty",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_12->To verify error is thrown if client_secret is empty",
                  "timedOut": false,
                  "duration": 556,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=&grant_type=client_credentials\"\n}",
                  "code": "let body = await accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n                     .setValue(\"client_secret\", \"\")\n                     .setValue(\"grant_type\", configData.GRANT_TYPE)\n                     .encode();\nresp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n  body: body,\n  headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n  }\n})\ngenericMethods.addContext(this, 'INPUT ', body);\n\nlet bodyObj = JSON.parse(resp.body);\nif (resp !== undefined) {\n  assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n  assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n  assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n}\nelse {\n  assert.fail(resp, \" is undefined\");\n}",
                  "err": {},
                  "uuid": "9cfde15f-cf23-4873-8b33-5e179ad49618",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "TC_AC_13->To verify error is thrown if client_secret is empty space",
                  "fullTitle": "Neutrinos Intelligent Document Processing APIs Get Access Token TC_AC_13->To verify error is thrown if client_secret is empty space",
                  "timedOut": false,
                  "duration": 554,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": "{\n  \"title\": \"INPUT \",\n  \"value\": \"client_id=x4PNAVz-EzNX48LFqnOsP&client_secret=%20&grant_type=client_credentials\"\n}",
                  "code": "let body = accessTokenData.setValue(\"client_id\", process.env.CLIENT_ID)\n               .setValue(\"client_secret\", \" \")\n               .setValue( \"grant_type\", configData.GRANT_TYPE)\n               .encode();\n resp = await genericMethods.postApiCall(configData.URL_ACCESS_TOKEN, {\n   body: body,\n   headers: {\n     \"Content-Type\": \"application/x-www-form-urlencoded\"\n   }\n })\n genericMethods.addContext(this, 'INPUT ', body);\n \n let bodyObj = JSON.parse(resp.body);\n if (resp !== undefined) {\n   assert.equal(resp.statusCode, HTTPStatusCodes.UNAUTHORIZED);\n   assert.equal(resp.statusMessage, HTTPStatusCode.getMessage(401));\n   assert.equal(bodyObj.error_description, dataValidation.AUTHORIZATION_FAILED);\n }\n else {\n   assert.fail(resp, \" is undefined\");\n }",
                  "err": {},
                  "uuid": "a759c095-a1e5-43e3-9623-e9f0e172df66",
                  "parentUUID": "8296fc4d-cfb4-498b-a6aa-ad53c993228e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cea43863-9c6d-4261-948f-4ab7e25537e0",
                "74d5e634-6320-4b2b-aaaf-8c0166fb5b09",
                "1126bd7f-a6d6-48d1-a0d3-70334a73ddf2",
                "fad0dcde-1242-4579-8740-f818779ec04c",
                "3539ca1d-e9b1-44bf-be95-ab841d672d04",
                "6e3d1490-53d8-454d-90c3-e0060974f646",
                "8244395b-97e5-4049-9d44-14ca51737d83",
                "f217dd76-61dd-4dfd-96b2-4f62a7c55778",
                "3440df2d-cdcd-49fb-9320-b3ac7228df8b",
                "206b5c8a-cdbf-43ae-aaa4-09578e98c5b7",
                "7845ecd1-2147-4bcd-80b9-857c2de43fb6",
                "9cfde15f-cf23-4873-8b33-5e179ad49618",
                "a759c095-a1e5-43e3-9623-e9f0e172df66"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6552,
              "root": false,
              "rootEmpty": false,
              "_timeout": 180000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 180000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 180000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "IDPTestingReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "5.0.0"
    },
    "marge": {
      "options": {
        "timestamp": true,
        "reportDir": "Reporting/IDPTestingReport",
        "reportFilename": "IDPTestingReport",
        "reportTitle": "IDPTesting"
      },
      "version": "4.1.0"
    }
  }
}